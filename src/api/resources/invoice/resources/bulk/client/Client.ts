/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Mercoa from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as serializers from "../../../../../../serialization/index.js";
import * as errors from "../../../../../../errors/index.js";
import { toJson } from "../../../../../../core/json.js";

export declare namespace Bulk {
    export interface Options {
        environment?: core.Supplier<environments.MercoaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the X-API-Version header */
        xApiVersion?: "2024-08-01";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-API-Version header */
        xApiVersion?: "2024-08-01";
    }
}

export class Bulk {
    protected readonly _options: Bulk.Options;

    constructor(_options: Bulk.Options) {
        this._options = _options;
    }

    /**
     * Create multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were created or failed to create.
     *
     * @param {Mercoa.invoice.BulkInvoiceCreationRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.bulk.create({
     *         body: {
     *             invoices: [{
     *                     status: "NEW",
     *                     amount: 100,
     *                     currency: "USD",
     *                     invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
     *                     dueDate: new Date("2021-01-31T00:00:00.000Z"),
     *                     invoiceNumber: "INV-123",
     *                     noteToSelf: "For the month of January",
     *                     payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *                     paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
     *                     vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *                     paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
     *                     paymentDestinationOptions: {
     *                         type: "check",
     *                         delivery: "MAIL",
     *                         printDescription: true
     *                     },
     *                     lineItems: [{
     *                             amount: 100,
     *                             currency: "USD",
     *                             description: "Product A",
     *                             name: "Product A",
     *                             quantity: 1,
     *                             unitPrice: 100,
     *                             category: "EXPENSE",
     *                             serviceStartDate: new Date("2021-01-01T00:00:00.000Z"),
     *                             serviceEndDate: new Date("2021-01-31T00:00:00.000Z"),
     *                             metadata: {
     *                                 "key1": "value1",
     *                                 "key2": "value2"
     *                             },
     *                             glAccountId: "600394"
     *                         }],
     *                     creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *                     creatorUserId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506"
     *                 }]
     *         }
     *     })
     */
    public create(
        request: Mercoa.invoice.BulkInvoiceCreationRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.BulkInvoiceCreationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Mercoa.invoice.BulkInvoiceCreationRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.BulkInvoiceCreationResponse>> {
        const { emitWebhooks, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (emitWebhooks != null) {
            _queryParams["emitWebhooks"] = emitWebhooks.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                "invoices",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.BulkInvoiceCreationRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkInvoiceCreationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError("Timeout exceeded when calling POST /invoices.");
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were updated or failed to update.
     *
     * @param {Mercoa.invoice.BulkInvoiceUpdateRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.bulk.update({
     *         body: {
     *             invoices: [{
     *                     invoiceId: "inv_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *                     status: "NEW",
     *                     amount: 100,
     *                     currency: "USD",
     *                     dueDate: new Date("2024-01-31T00:00:00.000Z"),
     *                     invoiceDate: new Date("2024-01-01T00:00:00.000Z"),
     *                     invoiceNumber: "INV-001",
     *                     lineItems: [{
     *                             description: "Item 1",
     *                             amount: 50,
     *                             quantity: 1
     *                         }, {
     *                             description: "Item 2",
     *                             amount: 50,
     *                             quantity: 1
     *                         }]
     *                 }]
     *         }
     *     })
     */
    public update(
        request: Mercoa.invoice.BulkInvoiceUpdateRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.BulkInvoiceUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Mercoa.invoice.BulkInvoiceUpdateRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.BulkInvoiceUpdateResponse>> {
        const { emitWebhooks, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (emitWebhooks != null) {
            _queryParams["emitWebhooks"] = emitWebhooks.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                "invoices",
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.BulkInvoiceUpdateRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkInvoiceUpdateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError("Timeout exceeded when calling PUT /invoices.");
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Approve multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were approved or failed to approve.
     *
     * @param {Mercoa.invoice.BulkInvoiceApprovalRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.bulk.approve({
     *         body: {
     *             invoices: [{
     *                     invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
     *                     text: "This is a reason for my action",
     *                     userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506"
     *                 }]
     *         }
     *     })
     */
    public approve(
        request: Mercoa.invoice.BulkInvoiceApprovalRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.BulkInvoiceApprovalResponse> {
        return core.HttpResponsePromise.fromPromise(this.__approve(request, requestOptions));
    }

    private async __approve(
        request: Mercoa.invoice.BulkInvoiceApprovalRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.BulkInvoiceApprovalResponse>> {
        const { emitWebhooks, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (emitWebhooks != null) {
            _queryParams["emitWebhooks"] = emitWebhooks.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                "invoices/approve",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.BulkInvoiceApprovalRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkInvoiceApprovalResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError("Timeout exceeded when calling POST /invoices/approve.");
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a URL to download a bulk invoice as a CSV/JSON file.
     *
     * @param {Mercoa.invoice.DownloadBulkInvoicesRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.bulk.download({
     *         format: "CSV"
     *     })
     */
    public download(
        request: Mercoa.invoice.DownloadBulkInvoicesRequest = {},
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.BulkDownloadResponse> {
        return core.HttpResponsePromise.fromPromise(this.__download(request, requestOptions));
    }

    private async __download(
        request: Mercoa.invoice.DownloadBulkInvoicesRequest = {},
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.BulkDownloadResponse>> {
        const {
            format,
            entityId,
            entityGroupId,
            startDate,
            endDate,
            dateType,
            orderBy,
            orderDirection,
            startingAfter,
            search,
            metadata,
            lineItemMetadata,
            lineItemGlAccountId,
            payerId,
            vendorId,
            creatorUserId,
            approverId,
            approverAction,
            invoiceId,
            status,
            paymentType,
            invoiceTemplateId,
            returnPayerMetadata,
            returnVendorMetadata,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (format != null) {
            _queryParams["format"] = serializers.BulkDownloadFormat.jsonOrThrow(format, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (entityId != null) {
            if (Array.isArray(entityId)) {
                _queryParams["entityId"] = entityId.map((item) =>
                    serializers.EntityId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["entityId"] = entityId;
            }
        }

        if (entityGroupId != null) {
            _queryParams["entityGroupId"] = entityGroupId;
        }

        if (startDate != null) {
            _queryParams["startDate"] = startDate.toISOString();
        }

        if (endDate != null) {
            _queryParams["endDate"] = endDate.toISOString();
        }

        if (dateType != null) {
            _queryParams["dateType"] = serializers.InvoiceDateFilter.jsonOrThrow(dateType, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (orderBy != null) {
            _queryParams["orderBy"] = serializers.InvoiceOrderByField.jsonOrThrow(orderBy, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (orderDirection != null) {
            _queryParams["orderDirection"] = serializers.OrderDirection.jsonOrThrow(orderDirection, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (startingAfter != null) {
            _queryParams["startingAfter"] = startingAfter;
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        if (metadata != null) {
            if (Array.isArray(metadata)) {
                _queryParams["metadata"] = await Promise.all(
                    metadata.map(async (item) =>
                        serializers.MetadataFilter.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            omitUndefined: true,
                            breadcrumbsPrefix: ["request", "metadata"],
                        }),
                    ),
                );
            } else {
                _queryParams["metadata"] = serializers.MetadataFilter.jsonOrThrow(metadata, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    omitUndefined: true,
                    breadcrumbsPrefix: ["request", "metadata"],
                });
            }
        }

        if (lineItemMetadata != null) {
            if (Array.isArray(lineItemMetadata)) {
                _queryParams["lineItemMetadata"] = await Promise.all(
                    lineItemMetadata.map(async (item) =>
                        serializers.MetadataFilter.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            omitUndefined: true,
                            breadcrumbsPrefix: ["request", "lineItemMetadata"],
                        }),
                    ),
                );
            } else {
                _queryParams["lineItemMetadata"] = serializers.MetadataFilter.jsonOrThrow(lineItemMetadata, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    omitUndefined: true,
                    breadcrumbsPrefix: ["request", "lineItemMetadata"],
                });
            }
        }

        if (lineItemGlAccountId != null) {
            if (Array.isArray(lineItemGlAccountId)) {
                _queryParams["lineItemGlAccountId"] = lineItemGlAccountId.map((item) => item);
            } else {
                _queryParams["lineItemGlAccountId"] = lineItemGlAccountId;
            }
        }

        if (payerId != null) {
            if (Array.isArray(payerId)) {
                _queryParams["payerId"] = payerId.map((item) =>
                    serializers.EntityId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["payerId"] = payerId;
            }
        }

        if (vendorId != null) {
            if (Array.isArray(vendorId)) {
                _queryParams["vendorId"] = vendorId.map((item) =>
                    serializers.EntityId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["vendorId"] = vendorId;
            }
        }

        if (creatorUserId != null) {
            if (Array.isArray(creatorUserId)) {
                _queryParams["creatorUserId"] = creatorUserId.map((item) =>
                    serializers.EntityUserId.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["creatorUserId"] = creatorUserId;
            }
        }

        if (approverId != null) {
            if (Array.isArray(approverId)) {
                _queryParams["approverId"] = approverId.map((item) =>
                    serializers.EntityUserId.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["approverId"] = approverId;
            }
        }

        if (approverAction != null) {
            if (Array.isArray(approverAction)) {
                _queryParams["approverAction"] = approverAction.map((item) =>
                    serializers.ApproverAction.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["approverAction"] = serializers.ApproverAction.jsonOrThrow(approverAction, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
            }
        }

        if (invoiceId != null) {
            if (Array.isArray(invoiceId)) {
                _queryParams["invoiceId"] = invoiceId.map((item) =>
                    serializers.InvoiceId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["invoiceId"] = invoiceId;
            }
        }

        if (status != null) {
            if (Array.isArray(status)) {
                _queryParams["status"] = status.map((item) =>
                    serializers.InvoiceStatus.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["status"] = serializers.InvoiceStatus.jsonOrThrow(status, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
            }
        }

        if (paymentType != null) {
            _queryParams["paymentType"] = toJson(paymentType);
        }

        if (invoiceTemplateId != null) {
            if (Array.isArray(invoiceTemplateId)) {
                _queryParams["invoiceTemplateId"] = invoiceTemplateId.map((item) =>
                    serializers.InvoiceTemplateId.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["invoiceTemplateId"] = invoiceTemplateId;
            }
        }

        if (returnPayerMetadata != null) {
            _queryParams["returnPayerMetadata"] = returnPayerMetadata.toString();
        }

        if (returnVendorMetadata != null) {
            _queryParams["returnVendorMetadata"] = returnVendorMetadata.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                "invoices/download",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkDownloadResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError("Timeout exceeded when calling GET /invoices/download.");
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
