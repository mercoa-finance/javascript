/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Mercoa from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { LineItem } from "../resources/lineItem/client/Client";
import { Approval } from "../resources/approval/client/Client";
import { Comment } from "../resources/comment/client/Client";
import { Document } from "../resources/document/client/Client";
import { PaymentLinks } from "../resources/paymentLinks/client/Client";

export declare namespace Invoice {
    interface Options {
        environment?: core.Supplier<environments.MercoaEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Invoice {
    constructor(protected readonly _options: Invoice.Options) {}

    /**
     * Search invoices for all entities in the organization
     *
     * @param {Mercoa.invoice.GetAllInvoicesRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.find({
     *         entityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c"
     *     })
     */
    public async find(
        request: Mercoa.invoice.GetAllInvoicesRequest = {},
        requestOptions?: Invoice.RequestOptions
    ): Promise<Mercoa.FindInvoiceResponse> {
        const {
            entityId,
            startDate,
            endDate,
            dateType,
            orderBy,
            orderDirection,
            limit,
            startingAfter,
            search,
            metadata,
            lineItemMetadata,
            lineItemGlAccountId,
            payerId,
            vendorId,
            approverId,
            approverAction,
            invoiceId,
            status,
            paymentType,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (entityId != null) {
            if (Array.isArray(entityId)) {
                _queryParams["entityId"] = entityId.map((item) => item);
            } else {
                _queryParams["entityId"] = entityId;
            }
        }

        if (startDate != null) {
            _queryParams["startDate"] = startDate.toISOString();
        }

        if (endDate != null) {
            _queryParams["endDate"] = endDate.toISOString();
        }

        if (dateType != null) {
            _queryParams["dateType"] = dateType;
        }

        if (orderBy != null) {
            _queryParams["orderBy"] = orderBy;
        }

        if (orderDirection != null) {
            _queryParams["orderDirection"] = orderDirection;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (startingAfter != null) {
            _queryParams["startingAfter"] = startingAfter;
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        if (metadata != null) {
            if (Array.isArray(metadata)) {
                _queryParams["metadata"] = await Promise.all(
                    metadata.map(async (item) =>
                        serializers.InvoiceMetadataFilter.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["request", "metadata"],
                        })
                    )
                );
            } else {
                _queryParams["metadata"] = serializers.InvoiceMetadataFilter.jsonOrThrow(metadata, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["request", "metadata"],
                });
            }
        }

        if (lineItemMetadata != null) {
            if (Array.isArray(lineItemMetadata)) {
                _queryParams["lineItemMetadata"] = await Promise.all(
                    lineItemMetadata.map(async (item) =>
                        serializers.InvoiceMetadataFilter.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["request", "lineItemMetadata"],
                        })
                    )
                );
            } else {
                _queryParams["lineItemMetadata"] = serializers.InvoiceMetadataFilter.jsonOrThrow(lineItemMetadata, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["request", "lineItemMetadata"],
                });
            }
        }

        if (lineItemGlAccountId != null) {
            if (Array.isArray(lineItemGlAccountId)) {
                _queryParams["lineItemGlAccountId"] = lineItemGlAccountId.map((item) => item);
            } else {
                _queryParams["lineItemGlAccountId"] = lineItemGlAccountId;
            }
        }

        if (payerId != null) {
            if (Array.isArray(payerId)) {
                _queryParams["payerId"] = payerId.map((item) => item);
            } else {
                _queryParams["payerId"] = payerId;
            }
        }

        if (vendorId != null) {
            if (Array.isArray(vendorId)) {
                _queryParams["vendorId"] = vendorId.map((item) => item);
            } else {
                _queryParams["vendorId"] = vendorId;
            }
        }

        if (approverId != null) {
            if (Array.isArray(approverId)) {
                _queryParams["approverId"] = approverId.map((item) => item);
            } else {
                _queryParams["approverId"] = approverId;
            }
        }

        if (approverAction != null) {
            if (Array.isArray(approverAction)) {
                _queryParams["approverAction"] = approverAction.map((item) => item);
            } else {
                _queryParams["approverAction"] = approverAction;
            }
        }

        if (invoiceId != null) {
            if (Array.isArray(invoiceId)) {
                _queryParams["invoiceId"] = invoiceId.map((item) => item);
            } else {
                _queryParams["invoiceId"] = invoiceId;
            }
        }

        if (status != null) {
            if (Array.isArray(status)) {
                _queryParams["status"] = status.map((item) => item);
            } else {
                _queryParams["status"] = status;
            }
        }

        if (paymentType != null) {
            _queryParams["paymentType"] = JSON.stringify(paymentType);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MercoaEnvironment.Production,
                "invoices"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mercoa/javascript",
                "X-Fern-SDK-Version": "0.5.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.FindInvoiceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {Mercoa.InvoiceCreationRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.create({
     *         status: Mercoa.InvoiceStatus.New,
     *         amount: 100,
     *         currency: Mercoa.CurrencyCode.Usd,
     *         invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
     *         dueDate: new Date("2021-01-31T00:00:00.000Z"),
     *         invoiceNumber: "INV-123",
     *         noteToSelf: "For the month of January",
     *         payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
     *         vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *         paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
     *         paymentDestinationOptions: {
     *             type: "check",
     *             delivery: Mercoa.CheckDeliveryMethod.Mail
     *         },
     *         lineItems: [{
     *                 amount: 100,
     *                 currency: Mercoa.CurrencyCode.Usd,
     *                 description: "Product A",
     *                 name: "Product A",
     *                 quantity: 1,
     *                 unitPrice: 100,
     *                 serviceStartDate: new Date("2021-01-01T00:00:00.000Z"),
     *                 serviceEndDate: new Date("2021-01-31T00:00:00.000Z"),
     *                 metadata: {
     *                     "key1": "value1",
     *                     "key2": "value2"
     *                 },
     *                 glAccountId: "600394"
     *             }],
     *         creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         creatorUserId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506"
     *     })
     *
     * @example
     *     await client.invoice.create({
     *         status: Mercoa.InvoiceStatus.Draft,
     *         payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c"
     *     })
     *
     * @example
     *     await client.invoice.create({
     *         status: Mercoa.InvoiceStatus.New,
     *         payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *         currency: Mercoa.CurrencyCode.Usd,
     *         amount: 100,
     *         invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
     *         dueDate: new Date("2021-01-31T00:00:00.000Z"),
     *         paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769"
     *     })
     *
     * @example
     *     await client.invoice.create({
     *         status: Mercoa.InvoiceStatus.Scheduled,
     *         payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *         currency: Mercoa.CurrencyCode.Usd,
     *         amount: 100,
     *         invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
     *         dueDate: new Date("2021-01-31T00:00:00.000Z"),
     *         paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
     *         paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
     *         deductionDate: new Date("2021-01-29T00:00:00.000Z")
     *     })
     */
    public async create(
        request: Mercoa.InvoiceCreationRequest,
        requestOptions?: Invoice.RequestOptions
    ): Promise<Mercoa.InvoiceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MercoaEnvironment.Production,
                "invoice"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mercoa/javascript",
                "X-Fern-SDK-Version": "0.5.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.InvoiceCreationRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.InvoiceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {Mercoa.InvoiceId} invoiceId - Invoice ID or Invoice ForeignID
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.get("inv_8545a84e-a45f-41bf-bdf1-33b42a55812c")
     */
    public async get(
        invoiceId: Mercoa.InvoiceId,
        requestOptions?: Invoice.RequestOptions
    ): Promise<Mercoa.InvoiceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MercoaEnvironment.Production,
                `invoice/${encodeURIComponent(serializers.InvoiceId.jsonOrThrow(invoiceId))}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mercoa/javascript",
                "X-Fern-SDK-Version": "0.5.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.InvoiceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {Mercoa.InvoiceId} invoiceId - Invoice ID or Invoice ForeignID
     * @param {Mercoa.InvoiceUpdateRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.update("inv_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
     *         status: Mercoa.InvoiceStatus.New,
     *         amount: 100,
     *         currency: Mercoa.CurrencyCode.Usd,
     *         invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
     *         dueDate: new Date("2021-01-31T00:00:00.000Z"),
     *         invoiceNumber: "INV-123",
     *         noteToSelf: "For the month of January",
     *         payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
     *         vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *         paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
     *         paymentDestinationOptions: {
     *             type: "check",
     *             delivery: Mercoa.CheckDeliveryMethod.Mail
     *         },
     *         lineItems: [{
     *                 id: "inli_26672f38-eb9a-48f1-a7a0-f1b855e38cd7",
     *                 amount: 100,
     *                 currency: Mercoa.CurrencyCode.Usd,
     *                 description: "Product A",
     *                 name: "Product A",
     *                 quantity: 1,
     *                 unitPrice: 100,
     *                 serviceStartDate: new Date("2021-01-01T00:00:00.000Z"),
     *                 serviceEndDate: new Date("2021-01-31T00:00:00.000Z"),
     *                 metadata: {
     *                     "key1": "value1",
     *                     "key2": "value2"
     *                 },
     *                 glAccountId: "600394"
     *             }],
     *         creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
     *         creatorUserId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506"
     *     })
     *
     * @example
     *     await client.invoice.update("inv_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
     *         status: Mercoa.InvoiceStatus.New,
     *         vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
     *         currency: Mercoa.CurrencyCode.Usd,
     *         amount: 100,
     *         invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
     *         dueDate: new Date("2021-01-31T00:00:00.000Z"),
     *         paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769"
     *     })
     *
     * @example
     *     await client.invoice.update("inv_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
     *         status: Mercoa.InvoiceStatus.Scheduled,
     *         paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
     *         deductionDate: new Date("2021-01-29T00:00:00.000Z")
     *     })
     */
    public async update(
        invoiceId: Mercoa.InvoiceId,
        request: Mercoa.InvoiceUpdateRequest,
        requestOptions?: Invoice.RequestOptions
    ): Promise<Mercoa.InvoiceResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MercoaEnvironment.Production,
                `invoice/${encodeURIComponent(serializers.InvoiceId.jsonOrThrow(invoiceId))}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mercoa/javascript",
                "X-Fern-SDK-Version": "0.5.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.InvoiceUpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.InvoiceResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Only invoices in the DRAFT and NEW status can be deleted.
     *
     * @param {Mercoa.InvoiceId} invoiceId - Invoice ID or Invoice ForeignID
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.invoice.delete("inv_8545a84e-a45f-41bf-bdf1-33b42a55812c")
     */
    public async delete(invoiceId: Mercoa.InvoiceId, requestOptions?: Invoice.RequestOptions): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.MercoaEnvironment.Production,
                `invoice/${encodeURIComponent(serializers.InvoiceId.jsonOrThrow(invoiceId))}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@mercoa/javascript",
                "X-Fern-SDK-Version": "0.5.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected _lineItem: LineItem | undefined;

    public get lineItem(): LineItem {
        return (this._lineItem ??= new LineItem(this._options));
    }

    protected _approval: Approval | undefined;

    public get approval(): Approval {
        return (this._approval ??= new Approval(this._options));
    }

    protected _comment: Comment | undefined;

    public get comment(): Comment {
        return (this._comment ??= new Comment(this._options));
    }

    protected _document: Document | undefined;

    public get document(): Document {
        return (this._document ??= new Document(this._options));
    }

    protected _paymentLinks: PaymentLinks | undefined;

    public get paymentLinks(): PaymentLinks {
        return (this._paymentLinks ??= new PaymentLinks(this._options));
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
