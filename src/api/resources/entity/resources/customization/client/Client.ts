/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Mercoa from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as serializers from "../../../../../../serialization/index.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Customization {
    export interface Options {
        environment?: core.Supplier<environments.MercoaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the X-API-Version header */
        xApiVersion?: "2024-08-01";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-API-Version header */
        xApiVersion?: "2024-08-01";
    }
}

export class Customization {
    protected readonly _options: Customization.Options;

    constructor(_options: Customization.Options) {
        this._options = _options;
    }

    /**
     * Get entity customization.
     *
     * @param {Mercoa.EntityId} entityId - Entity ID or Entity ForeignID
     * @param {Customization.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.entity.customization.get("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced")
     */
    public get(
        entityId: Mercoa.EntityId,
        requestOptions?: Customization.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.EntityCustomizationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(entityId, requestOptions));
    }

    private async __get(
        entityId: Mercoa.EntityId,
        requestOptions?: Customization.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.EntityCustomizationResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                `/entity/${encodeURIComponent(serializers.EntityId.jsonOrThrow(entityId, { omitUndefined: true }))}/customization`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.EntityCustomizationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError(
                    "Timeout exceeded when calling GET /entity/{entityId}/customization.",
                );
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update entity customization. This lets you turn off metadata and payment methods for an entity.
     *
     * @param {Mercoa.EntityId} entityId - Entity ID or Entity ForeignID
     * @param {Mercoa.EntityCustomizationRequest} request
     * @param {Customization.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.entity.customization.update("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced", {
     *         metadata: [{
     *                 key: "my_custom_field",
     *                 disabled: true
     *             }, {
     *                 key: "my_other_field",
     *                 disabled: false
     *             }],
     *         paymentSource: [{
     *                 type: "bankAccount",
     *                 disabled: true,
     *                 defaultDeliveryMethod: "ACH_SAME_DAY"
     *             }, {
     *                 type: "custom",
     *                 schemaId: "cpms_7df2974a-4069-454c-912f-7e58ebe030fb",
     *                 disabled: true
     *             }],
     *         backupDisbursement: [{
     *                 type: "check",
     *                 disabled: true,
     *                 defaultDeliveryMethod: "MAIL",
     *                 printDescription: true
     *             }],
     *         paymentDestination: [{
     *                 type: "bankAccount",
     *                 disabled: true,
     *                 defaultDeliveryMethod: "ACH_SAME_DAY"
     *             }, {
     *                 type: "check",
     *                 disabled: true,
     *                 defaultDeliveryMethod: "MAIL",
     *                 printDescription: true
     *             }],
     *         ocr: {
     *             lineItems: true,
     *             collapseLineItems: true,
     *             invoiceMetadata: true,
     *             lineItemMetadata: true,
     *             lineItemGlAccountId: true,
     *             predictMetadata: true,
     *             taxAndShippingAsLineItems: true,
     *             splitDocuments: true
     *         },
     *         notifications: {
     *             assumeRole: "admin"
     *         },
     *         workflow: {
     *             autoAdvanceInvoiceStatus: true
     *         },
     *         invoice: {
     *             hideAddress: false,
     *             hideQrCode: false,
     *             hideBankDetails: false,
     *             hidePaymentLink: false
     *         },
     *         rolePermissions: {
     *             "admin": ["invoice.all", "paymentMethod.all"]
     *         },
     *         fees: {
     *             payable: {
     *                 source: {
     *                     achStandard: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     achSameDay: {
     *                         type: "percentage",
     *                         amount: 2.5
     *                     },
     *                     checkPrint: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMail: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailPriority: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailUpsNextDay: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     }
     *                 },
     *                 destination: {
     *                     achStandard: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     achSameDay: {
     *                         type: "percentage",
     *                         amount: 2.5
     *                     },
     *                     checkPrint: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMail: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailPriority: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailUpsNextDay: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     }
     *                 }
     *             },
     *             receivable: {
     *                 source: {
     *                     achStandard: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     achSameDay: {
     *                         type: "percentage",
     *                         amount: 2.5
     *                     },
     *                     checkPrint: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMail: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailPriority: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailUpsNextDay: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     }
     *                 },
     *                 destination: {
     *                     achStandard: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     achSameDay: {
     *                         type: "percentage",
     *                         amount: 2.5
     *                     },
     *                     checkPrint: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMail: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailPriority: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     },
     *                     checkMailUpsNextDay: {
     *                         type: "flat",
     *                         amount: 2.5
     *                     }
     *                 }
     *             }
     *         }
     *     })
     */
    public update(
        entityId: Mercoa.EntityId,
        request: Mercoa.EntityCustomizationRequest,
        requestOptions?: Customization.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.EntityCustomizationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(entityId, request, requestOptions));
    }

    private async __update(
        entityId: Mercoa.EntityId,
        request: Mercoa.EntityCustomizationRequest,
        requestOptions?: Customization.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.EntityCustomizationResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                `/entity/${encodeURIComponent(serializers.EntityId.jsonOrThrow(entityId, { omitUndefined: true }))}/customization`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.EntityCustomizationRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.EntityCustomizationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError(
                    "Timeout exceeded when calling POST /entity/{entityId}/customization.",
                );
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
