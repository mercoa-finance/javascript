/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments.js";
import * as core from "../../../../../../../../core/index.js";
import * as Mercoa from "../../../../../../../index.js";
import * as serializers from "../../../../../../../../serialization/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers.js";
import * as errors from "../../../../../../../../errors/index.js";

export declare namespace Bulk {
    export interface Options {
        environment?: core.Supplier<environments.MercoaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the X-API-Version header */
        xApiVersion?: "2024-08-01";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-API-Version header */
        xApiVersion?: "2024-08-01";
    }
}

export class Bulk {
    protected readonly _options: Bulk.Options;

    constructor(_options: Bulk.Options) {
        this._options = _options;
    }

    /**
     * Get a URL to download payee counterparties as a CSV/JSON file. This endpoint lets you download vendors linked to the entity.
     *
     * @param {Mercoa.EntityId} entityId - Entity ID or Entity ForeignID
     * @param {Mercoa.entity.counterparty.DownloadBulkPayeesRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.entity.counterparty.bulk.downloadPayees("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
     *         format: "CSV",
     *         paymentMethods: true,
     *         invoiceMetrics: true
     *     })
     */
    public downloadPayees(
        entityId: Mercoa.EntityId,
        request: Mercoa.entity.counterparty.DownloadBulkPayeesRequest = {},
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.BulkDownloadResponse> {
        return core.HttpResponsePromise.fromPromise(this.__downloadPayees(entityId, request, requestOptions));
    }

    private async __downloadPayees(
        entityId: Mercoa.EntityId,
        request: Mercoa.entity.counterparty.DownloadBulkPayeesRequest = {},
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.BulkDownloadResponse>> {
        const {
            format,
            search,
            networkType,
            paymentMethods,
            invoiceMetrics,
            counterpartyId,
            metadata,
            returnMetadata,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (format != null) {
            _queryParams["format"] = serializers.BulkDownloadFormat.jsonOrThrow(format, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        if (networkType != null) {
            if (Array.isArray(networkType)) {
                _queryParams["networkType"] = networkType.map((item) =>
                    serializers.CounterpartyNetworkType.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["networkType"] = serializers.CounterpartyNetworkType.jsonOrThrow(networkType, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
            }
        }

        if (paymentMethods != null) {
            _queryParams["paymentMethods"] = paymentMethods.toString();
        }

        if (invoiceMetrics != null) {
            _queryParams["invoiceMetrics"] = invoiceMetrics.toString();
        }

        if (counterpartyId != null) {
            if (Array.isArray(counterpartyId)) {
                _queryParams["counterpartyId"] = counterpartyId.map((item) =>
                    serializers.EntityId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["counterpartyId"] = counterpartyId;
            }
        }

        if (metadata != null) {
            if (Array.isArray(metadata)) {
                _queryParams["metadata"] = await Promise.all(
                    metadata.map(async (item) =>
                        serializers.MetadataFilter.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            omitUndefined: true,
                            breadcrumbsPrefix: ["request", "metadata"],
                        }),
                    ),
                );
            } else {
                _queryParams["metadata"] = serializers.MetadataFilter.jsonOrThrow(metadata, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    omitUndefined: true,
                    breadcrumbsPrefix: ["request", "metadata"],
                });
            }
        }

        if (returnMetadata != null) {
            if (Array.isArray(returnMetadata)) {
                _queryParams["returnMetadata"] = returnMetadata.map((item) => item);
            } else {
                _queryParams["returnMetadata"] = returnMetadata;
            }
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                `/entity/${encodeURIComponent(serializers.EntityId.jsonOrThrow(entityId, { omitUndefined: true }))}/counterparties/payees/download`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkDownloadResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError(
                    "Timeout exceeded when calling GET /entity/{entityId}/counterparties/payees/download.",
                );
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a URL to download payor counterparties as a CSV/JSON file. This endpoint lets you download customers linked to the entity.
     *
     * @param {Mercoa.EntityId} entityId - Entity ID or Entity ForeignID
     * @param {Mercoa.entity.counterparty.DownloadBulkPayorsRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Mercoa.BadRequest}
     * @throws {@link Mercoa.Unauthorized}
     * @throws {@link Mercoa.Forbidden}
     * @throws {@link Mercoa.NotFound}
     * @throws {@link Mercoa.Conflict}
     * @throws {@link Mercoa.InternalServerError}
     * @throws {@link Mercoa.Unimplemented}
     *
     * @example
     *     await client.entity.counterparty.bulk.downloadPayors("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
     *         format: "CSV",
     *         paymentMethods: true,
     *         invoiceMetrics: true
     *     })
     */
    public downloadPayors(
        entityId: Mercoa.EntityId,
        request: Mercoa.entity.counterparty.DownloadBulkPayorsRequest = {},
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<Mercoa.BulkDownloadResponse> {
        return core.HttpResponsePromise.fromPromise(this.__downloadPayors(entityId, request, requestOptions));
    }

    private async __downloadPayors(
        entityId: Mercoa.EntityId,
        request: Mercoa.entity.counterparty.DownloadBulkPayorsRequest = {},
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<Mercoa.BulkDownloadResponse>> {
        const {
            format,
            search,
            networkType,
            paymentMethods,
            invoiceMetrics,
            counterpartyId,
            metadata,
            returnMetadata,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (format != null) {
            _queryParams["format"] = serializers.BulkDownloadFormat.jsonOrThrow(format, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        if (networkType != null) {
            if (Array.isArray(networkType)) {
                _queryParams["networkType"] = networkType.map((item) =>
                    serializers.CounterpartyNetworkType.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    }),
                );
            } else {
                _queryParams["networkType"] = serializers.CounterpartyNetworkType.jsonOrThrow(networkType, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
            }
        }

        if (paymentMethods != null) {
            _queryParams["paymentMethods"] = paymentMethods.toString();
        }

        if (invoiceMetrics != null) {
            _queryParams["invoiceMetrics"] = invoiceMetrics.toString();
        }

        if (counterpartyId != null) {
            if (Array.isArray(counterpartyId)) {
                _queryParams["counterpartyId"] = counterpartyId.map((item) =>
                    serializers.EntityId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["counterpartyId"] = counterpartyId;
            }
        }

        if (metadata != null) {
            if (Array.isArray(metadata)) {
                _queryParams["metadata"] = await Promise.all(
                    metadata.map(async (item) =>
                        serializers.MetadataFilter.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            omitUndefined: true,
                            breadcrumbsPrefix: ["request", "metadata"],
                        }),
                    ),
                );
            } else {
                _queryParams["metadata"] = serializers.MetadataFilter.jsonOrThrow(metadata, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    omitUndefined: true,
                    breadcrumbsPrefix: ["request", "metadata"],
                });
            }
        }

        if (returnMetadata != null) {
            if (Array.isArray(returnMetadata)) {
                _queryParams["returnMetadata"] = returnMetadata.map((item) => item);
            } else {
                _queryParams["returnMetadata"] = returnMetadata;
            }
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-API-Version": requestOptions?.xApiVersion,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MercoaEnvironment.Production,
                `/entity/${encodeURIComponent(serializers.EntityId.jsonOrThrow(entityId, { omitUndefined: true }))}/counterparties/payors/download`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkDownloadResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["errorName"]) {
                case "BadRequest":
                    throw new Mercoa.BadRequest(
                        serializers.BadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unauthorized":
                    throw new Mercoa.Unauthorized(
                        serializers.Unauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Forbidden":
                    throw new Mercoa.Forbidden(
                        serializers.Forbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "NotFound":
                    throw new Mercoa.NotFound(
                        serializers.NotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Conflict":
                    throw new Mercoa.Conflict(
                        serializers.Conflict.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "InternalServerError":
                    throw new Mercoa.InternalServerError(
                        serializers.InternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case "Unimplemented":
                    throw new Mercoa.Unimplemented(
                        serializers.Unimplemented.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MercoaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError(
                    "Timeout exceeded when calling GET /entity/{entityId}/counterparties/payors/download.",
                );
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
