/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Mercoa from "../../../../api";
import * as core from "../../../../core";

export const RepresentativeResponse: core.serialization.ObjectSchema<
    serializers.RepresentativeResponse.Raw,
    Mercoa.RepresentativeResponse
> = core.serialization.object({
    id: core.serialization.lazy(async () => (await import("../../..")).RepresentativeId),
    name: core.serialization.lazyObject(async () => (await import("../../..")).FullName),
    phone: core.serialization.lazyObject(async () => (await import("../../..")).PhoneNumber),
    email: core.serialization.string(),
    address: core.serialization.lazyObject(async () => (await import("../../..")).Address),
    birthDateProvided: core.serialization.boolean(),
    governmentIdProvided: core.serialization.property("governmentIDProvided", core.serialization.boolean()),
    responsibilities: core.serialization.lazyObject(async () => (await import("../../..")).Responsibilities),
    createdOn: core.serialization.date(),
    updatedOn: core.serialization.date(),
    disabledOn: core.serialization.date().optional(),
});

export declare namespace RepresentativeResponse {
    interface Raw {
        id: serializers.RepresentativeId.Raw;
        name: serializers.FullName.Raw;
        phone: serializers.PhoneNumber.Raw;
        email: string;
        address: serializers.Address.Raw;
        birthDateProvided: boolean;
        governmentIDProvided: boolean;
        responsibilities: serializers.Responsibilities.Raw;
        createdOn: string;
        updatedOn: string;
        disabledOn?: string | null;
    }
}
