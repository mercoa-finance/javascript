/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Mercoa from "../../../../api/index";
import * as core from "../../../../core";
import { ContractId } from "./ContractId";
import { ContractRecurrenceResponse } from "./ContractRecurrenceResponse";
import { EntityId } from "../../entityTypes/types/EntityId";
import { CounterpartyResponse } from "../../entityTypes/types/CounterpartyResponse";

export const ContractResponse: core.serialization.ObjectSchema<
    serializers.ContractResponse.Raw,
    Mercoa.ContractResponse
> = core.serialization.object({
    id: ContractId,
    summary: core.serialization.string(),
    recurrences: core.serialization.list(ContractRecurrenceResponse),
    nextInvoiceDate: core.serialization.string().optional(),
    creatorEntityId: EntityId,
    payerId: EntityId.optional(),
    payer: CounterpartyResponse.optional(),
    vendorId: EntityId.optional(),
    vendor: CounterpartyResponse.optional(),
    createdAt: core.serialization.date(),
    updatedAt: core.serialization.date(),
});

export declare namespace ContractResponse {
    export interface Raw {
        id: ContractId.Raw;
        summary: string;
        recurrences: ContractRecurrenceResponse.Raw[];
        nextInvoiceDate?: string | null;
        creatorEntityId: EntityId.Raw;
        payerId?: EntityId.Raw | null;
        payer?: CounterpartyResponse.Raw | null;
        vendorId?: EntityId.Raw | null;
        vendor?: CounterpartyResponse.Raw | null;
        createdAt: string;
        updatedAt: string;
    }
}
