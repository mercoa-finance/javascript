/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Mercoa from "../../../../api/index";
import * as core from "../../../../core";
import { TransactionResponseBankToBankBase } from "./TransactionResponseBankToBankBase";
import { TransactionResponseBankToMailedCheckBase } from "./TransactionResponseBankToMailedCheckBase";
import { TransactionResponseBase } from "./TransactionResponseBase";

export const TransactionResponseWithoutInvoices: core.serialization.Schema<
    serializers.TransactionResponseWithoutInvoices.Raw,
    Mercoa.TransactionResponseWithoutInvoices
> = core.serialization
    .union("type", {
        bankAccountToBankAccount: TransactionResponseBankToBankBase,
        bankAccountToMailedCheck: TransactionResponseBankToMailedCheckBase,
        custom: TransactionResponseBase,
        offPlatform: TransactionResponseBase,
    })
    .transform<Mercoa.TransactionResponseWithoutInvoices>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace TransactionResponseWithoutInvoices {
    type Raw =
        | TransactionResponseWithoutInvoices.BankAccountToBankAccount
        | TransactionResponseWithoutInvoices.BankAccountToMailedCheck
        | TransactionResponseWithoutInvoices.Custom
        | TransactionResponseWithoutInvoices.OffPlatform;

    interface BankAccountToBankAccount extends TransactionResponseBankToBankBase.Raw {
        type: "bankAccountToBankAccount";
    }

    interface BankAccountToMailedCheck extends TransactionResponseBankToMailedCheckBase.Raw {
        type: "bankAccountToMailedCheck";
    }

    interface Custom extends TransactionResponseBase.Raw {
        type: "custom";
    }

    interface OffPlatform extends TransactionResponseBase.Raw {
        type: "offPlatform";
    }
}
