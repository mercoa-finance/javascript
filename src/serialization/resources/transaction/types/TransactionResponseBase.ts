/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Mercoa from "../../../../api/index";
import * as core from "../../../../core";
import { TransactionId } from "./TransactionId";
import { TransactionStatus } from "./TransactionStatus";
import { EntityId } from "../../entityTypes/types/EntityId";
import { CounterpartyResponse } from "../../entityTypes/types/CounterpartyResponse";
import { PaymentMethodResponse } from "../../paymentMethodTypes/types/PaymentMethodResponse";
import { PaymentMethodId } from "../../paymentMethodTypes/types/PaymentMethodId";
import { PaymentDestinationOptions } from "../../invoiceTypes/types/PaymentDestinationOptions";
import { InvoiceFeesResponse } from "../../invoiceTypes/types/InvoiceFeesResponse";

export const TransactionResponseBase: core.serialization.ObjectSchema<
    serializers.TransactionResponseBase.Raw,
    Mercoa.TransactionResponseBase
> = core.serialization.object({
    id: TransactionId,
    status: TransactionStatus,
    amount: core.serialization.number(),
    currency: core.serialization.string(),
    payerId: EntityId,
    payer: CounterpartyResponse,
    paymentSource: PaymentMethodResponse,
    paymentSourceId: PaymentMethodId,
    vendorId: EntityId,
    vendor: CounterpartyResponse,
    paymentDestination: PaymentMethodResponse,
    paymentDestinationId: PaymentMethodId,
    paymentDestinationOptions: PaymentDestinationOptions.optional(),
    fees: InvoiceFeesResponse.optional(),
    createdAt: core.serialization.date(),
    updatedAt: core.serialization.date(),
});

export declare namespace TransactionResponseBase {
    export interface Raw {
        id: TransactionId.Raw;
        status: TransactionStatus.Raw;
        amount: number;
        currency: string;
        payerId: EntityId.Raw;
        payer: CounterpartyResponse.Raw;
        paymentSource: PaymentMethodResponse.Raw;
        paymentSourceId: PaymentMethodId.Raw;
        vendorId: EntityId.Raw;
        vendor: CounterpartyResponse.Raw;
        paymentDestination: PaymentMethodResponse.Raw;
        paymentDestinationId: PaymentMethodId.Raw;
        paymentDestinationOptions?: PaymentDestinationOptions.Raw | null;
        fees?: InvoiceFeesResponse.Raw | null;
        createdAt: string;
        updatedAt: string;
    }
}
