/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Mercoa from "../../../../api";
import * as core from "../../../../core";

export const InvoiceRequest: core.serialization.ObjectSchema<serializers.InvoiceRequest.Raw, Mercoa.InvoiceRequest> =
    core.serialization.object({
        status: core.serialization.lazy(async () => (await import("../../..")).InvoiceStatus).optional(),
        amount: core.serialization.number().optional(),
        currency: core.serialization.lazy(async () => (await import("../../..")).CurrencyCode).optional(),
        invoiceDate: core.serialization.date().optional(),
        deductionDate: core.serialization.date().optional(),
        settlementDate: core.serialization.date().optional(),
        dueDate: core.serialization.date().optional(),
        invoiceNumber: core.serialization.string().optional(),
        noteToSelf: core.serialization.string().optional(),
        serviceStartDate: core.serialization.date().optional(),
        serviceEndDate: core.serialization.date().optional(),
        payerId: core.serialization.lazy(async () => (await import("../../..")).EntityId).optional(),
        paymentSourceId: core.serialization.lazy(async () => (await import("../../..")).PaymentMethodId).optional(),
        paymentSourceOptions: core.serialization
            .lazy(async () => (await import("../../..")).PaymentSourceOptions)
            .optional(),
        approvers: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).ApprovalSlotAssignment))
            .optional(),
        vendorId: core.serialization.lazy(async () => (await import("../../..")).EntityId).optional(),
        paymentDestinationId: core.serialization
            .lazy(async () => (await import("../../..")).PaymentMethodId)
            .optional(),
        paymentDestinationOptions: core.serialization
            .lazy(async () => (await import("../../..")).PaymentDestinationOptions)
            .optional(),
        lineItems: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).InvoiceLineItemRequest))
            .optional(),
        metadata: core.serialization.record(core.serialization.string(), core.serialization.string()).optional(),
        foreignId: core.serialization.string().optional(),
        uploadedImage: core.serialization.string().optional(),
        creatorEntityId: core.serialization.lazy(async () => (await import("../../..")).EntityId).optional(),
        creatorUserId: core.serialization.lazy(async () => (await import("../../..")).EntityUserId).optional(),
    });

export declare namespace InvoiceRequest {
    interface Raw {
        status?: serializers.InvoiceStatus.Raw | null;
        amount?: number | null;
        currency?: serializers.CurrencyCode.Raw | null;
        invoiceDate?: string | null;
        deductionDate?: string | null;
        settlementDate?: string | null;
        dueDate?: string | null;
        invoiceNumber?: string | null;
        noteToSelf?: string | null;
        serviceStartDate?: string | null;
        serviceEndDate?: string | null;
        payerId?: serializers.EntityId.Raw | null;
        paymentSourceId?: serializers.PaymentMethodId.Raw | null;
        paymentSourceOptions?: serializers.PaymentSourceOptions.Raw | null;
        approvers?: serializers.ApprovalSlotAssignment.Raw[] | null;
        vendorId?: serializers.EntityId.Raw | null;
        paymentDestinationId?: serializers.PaymentMethodId.Raw | null;
        paymentDestinationOptions?: serializers.PaymentDestinationOptions.Raw | null;
        lineItems?: serializers.InvoiceLineItemRequest.Raw[] | null;
        metadata?: Record<string, string> | null;
        foreignId?: string | null;
        uploadedImage?: string | null;
        creatorEntityId?: serializers.EntityId.Raw | null;
        creatorUserId?: serializers.EntityUserId.Raw | null;
    }
}
