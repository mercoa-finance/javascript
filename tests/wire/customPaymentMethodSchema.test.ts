/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MercoaClient } from "../../src/Client";

describe("CustomPaymentMethodSchema", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "cpms_4794d597-70dc-4fec-b6ec-c5988e759769",
                name: "Wire",
                isSource: false,
                isDestination: true,
                supportedCurrencies: ["USD", "EUR"],
                fields: [
                    { name: "bankName", displayName: "Bank Name", type: "text", optional: false },
                    { name: "recipientName", displayName: "Recipient Name", type: "text", optional: false },
                    {
                        name: "accountNumber",
                        displayName: "Account Number",
                        type: "usBankAccountNumber",
                        optional: false,
                        useAsAccountNumber: true,
                    },
                    {
                        name: "routingNumber",
                        displayName: "Routing Number",
                        type: "usBankRoutingNumber",
                        optional: false,
                    },
                ],
                createdAt: "2021-01-01T00:00:00Z",
                updatedAt: "2021-01-01T00:00:00Z",
                estimatedProcessingTime: 0,
                maxAmount: 100000,
                minAmount: 1,
            },
            {
                id: "cpms_14f78dcd-4614-426e-a37a-7af262431d41",
                name: "Check",
                isSource: false,
                isDestination: true,
                supportedCurrencies: ["USD"],
                fields: [
                    { name: "payToTheOrderOf", displayName: "Pay To The Order Of", type: "text", optional: false },
                    {
                        name: "accountNumber",
                        displayName: "Account Number",
                        type: "usBankAccountNumber",
                        optional: false,
                        useAsAccountNumber: true,
                    },
                    {
                        name: "routingNumber",
                        displayName: "Routing Number",
                        type: "usBankRoutingNumber",
                        optional: false,
                    },
                    { name: "address", displayName: "Address", type: "address", optional: false },
                ],
                createdAt: "2021-01-01T00:00:00Z",
                updatedAt: "2021-01-01T00:00:00Z",
                estimatedProcessingTime: 7,
                maxAmount: 50000,
                minAmount: 1,
            },
        ];
        server
            .mockEndpoint()
            .get("/paymentMethod/schema")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customPaymentMethodSchema.getAll();
        expect(response).toEqual([
            {
                id: "cpms_4794d597-70dc-4fec-b6ec-c5988e759769",
                name: "Wire",
                isSource: false,
                isDestination: true,
                supportedCurrencies: ["USD", "EUR"],
                fields: [
                    {
                        name: "bankName",
                        displayName: "Bank Name",
                        type: "text",
                        optional: false,
                    },
                    {
                        name: "recipientName",
                        displayName: "Recipient Name",
                        type: "text",
                        optional: false,
                    },
                    {
                        name: "accountNumber",
                        displayName: "Account Number",
                        type: "usBankAccountNumber",
                        optional: false,
                        useAsAccountNumber: true,
                    },
                    {
                        name: "routingNumber",
                        displayName: "Routing Number",
                        type: "usBankRoutingNumber",
                        optional: false,
                    },
                ],
                createdAt: new Date("2021-01-01T00:00:00.000Z"),
                updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                estimatedProcessingTime: 0,
                maxAmount: 100000,
                minAmount: 1,
            },
            {
                id: "cpms_14f78dcd-4614-426e-a37a-7af262431d41",
                name: "Check",
                isSource: false,
                isDestination: true,
                supportedCurrencies: ["USD"],
                fields: [
                    {
                        name: "payToTheOrderOf",
                        displayName: "Pay To The Order Of",
                        type: "text",
                        optional: false,
                    },
                    {
                        name: "accountNumber",
                        displayName: "Account Number",
                        type: "usBankAccountNumber",
                        optional: false,
                        useAsAccountNumber: true,
                    },
                    {
                        name: "routingNumber",
                        displayName: "Routing Number",
                        type: "usBankRoutingNumber",
                        optional: false,
                    },
                    {
                        name: "address",
                        displayName: "Address",
                        type: "address",
                        optional: false,
                    },
                ],
                createdAt: new Date("2021-01-01T00:00:00.000Z"),
                updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                estimatedProcessingTime: 7,
                maxAmount: 50000,
                minAmount: 1,
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Wire",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD", "EUR"],
            fields: [
                { name: "bankName", displayName: "Bank Name", type: "text", optional: false },
                { name: "recipientName", displayName: "Recipient Name", type: "text", optional: false },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                { name: "routingNumber", displayName: "Routing Number", type: "usBankRoutingNumber", optional: false },
            ],
            estimatedProcessingTime: 0,
            maxAmount: 100000,
            minAmount: 1,
        };
        const rawResponseBody = {
            id: "cpms_4794d597-70dc-4fec-b6ec-c5988e759769",
            name: "Wire",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD", "EUR"],
            fields: [
                { name: "bankName", displayName: "Bank Name", type: "text", optional: false },
                { name: "recipientName", displayName: "Recipient Name", type: "text", optional: false },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                { name: "routingNumber", displayName: "Routing Number", type: "usBankRoutingNumber", optional: false },
            ],
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
            estimatedProcessingTime: 0,
            maxAmount: 100000,
            minAmount: 1,
        };
        server
            .mockEndpoint()
            .post("/paymentMethod/schema")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customPaymentMethodSchema.create({
            name: "Wire",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD", "EUR"],
            fields: [
                {
                    name: "bankName",
                    displayName: "Bank Name",
                    type: "text",
                    optional: false,
                },
                {
                    name: "recipientName",
                    displayName: "Recipient Name",
                    type: "text",
                    optional: false,
                },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                {
                    name: "routingNumber",
                    displayName: "Routing Number",
                    type: "usBankRoutingNumber",
                    optional: false,
                },
            ],
            estimatedProcessingTime: 0,
            maxAmount: 100000,
            minAmount: 1,
        });
        expect(response).toEqual({
            id: "cpms_4794d597-70dc-4fec-b6ec-c5988e759769",
            name: "Wire",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD", "EUR"],
            fields: [
                {
                    name: "bankName",
                    displayName: "Bank Name",
                    type: "text",
                    optional: false,
                },
                {
                    name: "recipientName",
                    displayName: "Recipient Name",
                    type: "text",
                    optional: false,
                },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                {
                    name: "routingNumber",
                    displayName: "Routing Number",
                    type: "usBankRoutingNumber",
                    optional: false,
                },
            ],
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
            estimatedProcessingTime: 0,
            maxAmount: 100000,
            minAmount: 1,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Check",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD"],
            fields: [
                { name: "payToTheOrderOf", displayName: "Pay To The Order Of", type: "text", optional: false },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                { name: "routingNumber", displayName: "Routing Number", type: "usBankRoutingNumber", optional: false },
                { name: "address", displayName: "Address", type: "address", optional: false },
            ],
            estimatedProcessingTime: 7,
            maxAmount: 50000,
            minAmount: 1,
        };
        const rawResponseBody = {
            id: "cpms_14f78dcd-4614-426e-a37a-7af262431d41",
            name: "Check",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD"],
            fields: [
                { name: "payToTheOrderOf", displayName: "Pay To The Order Of", type: "text", optional: false },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                { name: "routingNumber", displayName: "Routing Number", type: "usBankRoutingNumber", optional: false },
                { name: "address", displayName: "Address", type: "address", optional: false },
            ],
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
            estimatedProcessingTime: 7,
            maxAmount: 50000,
            minAmount: 1,
        };
        server
            .mockEndpoint()
            .post("/paymentMethod/schema/cpms_14f78dcd-4614-426e-a37a-7af262431d41")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customPaymentMethodSchema.update("cpms_14f78dcd-4614-426e-a37a-7af262431d41", {
            name: "Check",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD"],
            fields: [
                {
                    name: "payToTheOrderOf",
                    displayName: "Pay To The Order Of",
                    type: "text",
                    optional: false,
                },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                {
                    name: "routingNumber",
                    displayName: "Routing Number",
                    type: "usBankRoutingNumber",
                    optional: false,
                },
                {
                    name: "address",
                    displayName: "Address",
                    type: "address",
                    optional: false,
                },
            ],
            estimatedProcessingTime: 7,
            maxAmount: 50000,
            minAmount: 1,
        });
        expect(response).toEqual({
            id: "cpms_14f78dcd-4614-426e-a37a-7af262431d41",
            name: "Check",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD"],
            fields: [
                {
                    name: "payToTheOrderOf",
                    displayName: "Pay To The Order Of",
                    type: "text",
                    optional: false,
                },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                {
                    name: "routingNumber",
                    displayName: "Routing Number",
                    type: "usBankRoutingNumber",
                    optional: false,
                },
                {
                    name: "address",
                    displayName: "Address",
                    type: "address",
                    optional: false,
                },
            ],
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
            estimatedProcessingTime: 7,
            maxAmount: 50000,
            minAmount: 1,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "cpms_14f78dcd-4614-426e-a37a-7af262431d41",
            name: "Check",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD"],
            fields: [
                { name: "payToTheOrderOf", displayName: "Pay To The Order Of", type: "text", optional: false },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                { name: "routingNumber", displayName: "Routing Number", type: "usBankRoutingNumber", optional: false },
                { name: "address", displayName: "Address", type: "address", optional: false },
            ],
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
            estimatedProcessingTime: 7,
            maxAmount: 50000,
            minAmount: 1,
        };
        server
            .mockEndpoint()
            .get("/paymentMethod/schema/cpms_14f78dcd-4614-426e-a37a-7af262431d41")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customPaymentMethodSchema.get("cpms_14f78dcd-4614-426e-a37a-7af262431d41");
        expect(response).toEqual({
            id: "cpms_14f78dcd-4614-426e-a37a-7af262431d41",
            name: "Check",
            isSource: false,
            isDestination: true,
            supportedCurrencies: ["USD"],
            fields: [
                {
                    name: "payToTheOrderOf",
                    displayName: "Pay To The Order Of",
                    type: "text",
                    optional: false,
                },
                {
                    name: "accountNumber",
                    displayName: "Account Number",
                    type: "usBankAccountNumber",
                    optional: false,
                    useAsAccountNumber: true,
                },
                {
                    name: "routingNumber",
                    displayName: "Routing Number",
                    type: "usBankRoutingNumber",
                    optional: false,
                },
                {
                    name: "address",
                    displayName: "Address",
                    type: "address",
                    optional: false,
                },
            ],
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
            estimatedProcessingTime: 7,
            maxAmount: 50000,
            minAmount: 1,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/paymentMethod/schema/cpms_14f78dcd-4614-426e-a37a-7af262431d41")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.customPaymentMethodSchema.delete("cpms_14f78dcd-4614-426e-a37a-7af262431d41");
        expect(response).toEqual(undefined);
    });
});
