/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MercoaClient } from "../../src/Client";

describe("Calculate", () => {
    test("fee", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            amount: 100,
            paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            paymentDestinationId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        };
        const rawResponseBody = {
            sourcePaymentMethodFee: 0.1,
            sourcePlatformMarkupFee: 0.2,
            destinationPaymentMethodFee: 1,
            destinationPlatformMarkupFee: 1.5,
        };
        server
            .mockEndpoint()
            .post("/fees")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.calculate.fee({
            amount: 100,
            paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            paymentDestinationId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        });
        expect(response).toEqual({
            sourcePaymentMethodFee: 0.1,
            sourcePlatformMarkupFee: 0.2,
            destinationPaymentMethodFee: 1,
            destinationPlatformMarkupFee: 1.5,
        });
    });

    test("paymentTiming", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            estimatedDeductionDate: "2024-01-02T00:00:00Z",
            paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            paymentDestinationId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        };
        const rawResponseBody = {
            estimatedProcessingDate: "2024-01-02T00:00:00Z",
            businessDays: 3,
            estimatedProcessingTime: 3,
            estimatedSettlementDate: "2024-01-05T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/paymentTiming")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.calculate.paymentTiming({
            estimatedDeductionDate: new Date("2024-01-02T00:00:00.000Z"),
            paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            paymentDestinationId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        });
        expect(response).toEqual({
            estimatedProcessingDate: new Date("2024-01-02T00:00:00.000Z"),
            businessDays: 3,
            estimatedProcessingTime: 3,
            estimatedSettlementDate: new Date("2024-01-05T00:00:00.000Z"),
        });
    });
});
