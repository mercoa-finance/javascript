/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Approval", () => {
    test("addApprover", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            approvalSlotId: "inap_9bb311c9-7c15-4c9e-8148-63814e0abec6",
            userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        };

        server
            .mockEndpoint()
            .post("/invoice-template/invt_13c07096-5848-4aeb-ae7d-6576289034c4/add-approver")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.invoiceTemplate.approval.addApprover(
            "invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            {
                approvalSlotId: "inap_9bb311c9-7c15-4c9e-8148-63814e0abec6",
                userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            },
        );
        expect(response).toEqual(undefined);
    });

    test("approve", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            text: "This is a reason for my action",
            userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        };

        server
            .mockEndpoint()
            .post("/invoice-template/invt_13c07096-5848-4aeb-ae7d-6576289034c4/approve")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.invoiceTemplate.approval.approve("invt_13c07096-5848-4aeb-ae7d-6576289034c4", {
            text: "This is a reason for my action",
            userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        });
        expect(response).toEqual(undefined);
    });

    test("reject", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            text: "This is a reason for my action",
            userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        };

        server
            .mockEndpoint()
            .post("/invoice-template/invt_13c07096-5848-4aeb-ae7d-6576289034c4/reject")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.invoiceTemplate.approval.reject("invt_13c07096-5848-4aeb-ae7d-6576289034c4", {
            text: "This is a reason for my action",
            userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        });
        expect(response).toEqual(undefined);
    });
});
