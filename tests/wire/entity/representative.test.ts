/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Representative", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "rep_958c4ffb-dc06-494c-a0e0-1b4946c6bb0f",
                name: { firstName: "Jane", lastName: "Smith" },
                phone: { countryCode: "1", number: "2075551234" },
                email: "jane.smith@acme.com",
                address: {
                    addressLine1: "456 Main St",
                    city: "New York",
                    stateOrProvince: "NY",
                    postalCode: "10001",
                    country: "US",
                },
                birthDateProvided: true,
                governmentIDProvided: true,
                responsibilities: { isOwner: true, ownershipPercentage: 40 },
                createdOn: "2024-01-01T00:00:00Z",
                updatedOn: "2024-01-01T00:00:00Z",
            },
            {
                id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
                name: { firstName: "John", middleName: "Quincy", lastName: "Adams", suffix: "Jr." },
                phone: { countryCode: "1", number: "4155551234" },
                email: "john.doe@acme.com",
                address: {
                    addressLine1: "123 Main St",
                    addressLine2: "Unit 1",
                    city: "San Francisco",
                    stateOrProvince: "CA",
                    postalCode: "94105",
                    country: "US",
                },
                birthDateProvided: true,
                governmentIDProvided: true,
                responsibilities: { isOwner: true, ownershipPercentage: 40, isController: true },
                createdOn: "2024-01-01T00:00:00Z",
                updatedOn: "2024-01-01T00:00:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/representatives")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.representative.getAll("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c");
        expect(response).toEqual([
            {
                id: "rep_958c4ffb-dc06-494c-a0e0-1b4946c6bb0f",
                name: {
                    firstName: "Jane",
                    lastName: "Smith",
                },
                phone: {
                    countryCode: "1",
                    number: "2075551234",
                },
                email: "jane.smith@acme.com",
                address: {
                    addressLine1: "456 Main St",
                    city: "New York",
                    stateOrProvince: "NY",
                    postalCode: "10001",
                    country: "US",
                },
                birthDateProvided: true,
                governmentIdProvided: true,
                responsibilities: {
                    isOwner: true,
                    ownershipPercentage: 40,
                },
                createdOn: new Date("2024-01-01T00:00:00.000Z"),
                updatedOn: new Date("2024-01-01T00:00:00.000Z"),
            },
            {
                id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
                name: {
                    firstName: "John",
                    middleName: "Quincy",
                    lastName: "Adams",
                    suffix: "Jr.",
                },
                phone: {
                    countryCode: "1",
                    number: "4155551234",
                },
                email: "john.doe@acme.com",
                address: {
                    addressLine1: "123 Main St",
                    addressLine2: "Unit 1",
                    city: "San Francisco",
                    stateOrProvince: "CA",
                    postalCode: "94105",
                    country: "US",
                },
                birthDateProvided: true,
                governmentIdProvided: true,
                responsibilities: {
                    isOwner: true,
                    ownershipPercentage: 40,
                    isController: true,
                },
                createdOn: new Date("2024-01-01T00:00:00.000Z"),
                updatedOn: new Date("2024-01-01T00:00:00.000Z"),
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            name: { firstName: "John", middleName: "Quincy", lastName: "Adams", suffix: "Jr." },
            phone: { countryCode: "1", number: "4155551234" },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDate: { day: "1", month: "1", year: "1980" },
            governmentID: { ssn: "123-45-6789" },
            responsibilities: { isOwner: true, ownershipPercentage: 40, isController: true },
        };
        const rawResponseBody = {
            id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            name: { firstName: "John", middleName: "Quincy", lastName: "Adams", suffix: "Jr." },
            phone: { countryCode: "1", number: "4155551234" },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDateProvided: true,
            governmentIDProvided: true,
            responsibilities: { isOwner: true, ownershipPercentage: 40, isController: true },
            createdOn: "2024-01-01T00:00:00Z",
            updatedOn: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/representative")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.representative.create("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            name: {
                firstName: "John",
                middleName: "Quincy",
                lastName: "Adams",
                suffix: "Jr.",
            },
            phone: {
                countryCode: "1",
                number: "4155551234",
            },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDate: {
                day: "1",
                month: "1",
                year: "1980",
            },
            governmentId: {
                ssn: "123-45-6789",
            },
            responsibilities: {
                isOwner: true,
                ownershipPercentage: 40,
                isController: true,
            },
        });
        expect(response).toEqual({
            id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            name: {
                firstName: "John",
                middleName: "Quincy",
                lastName: "Adams",
                suffix: "Jr.",
            },
            phone: {
                countryCode: "1",
                number: "4155551234",
            },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDateProvided: true,
            governmentIdProvided: true,
            responsibilities: {
                isOwner: true,
                ownershipPercentage: 40,
                isController: true,
            },
            createdOn: new Date("2024-01-01T00:00:00.000Z"),
            updatedOn: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            name: { firstName: "John", middleName: "Quincy", lastName: "Adams", suffix: "Jr." },
            phone: { countryCode: "1", number: "4155551234" },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDateProvided: true,
            governmentIDProvided: true,
            responsibilities: { isOwner: true, ownershipPercentage: 40, isController: true },
            createdOn: "2024-01-01T00:00:00Z",
            updatedOn: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/representative/rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.representative.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
        );
        expect(response).toEqual({
            id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            name: {
                firstName: "John",
                middleName: "Quincy",
                lastName: "Adams",
                suffix: "Jr.",
            },
            phone: {
                countryCode: "1",
                number: "4155551234",
            },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDateProvided: true,
            governmentIdProvided: true,
            responsibilities: {
                isOwner: true,
                ownershipPercentage: 40,
                isController: true,
            },
            createdOn: new Date("2024-01-01T00:00:00.000Z"),
            updatedOn: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            name: { firstName: "John", middleName: "Quincy", lastName: "Adams", suffix: "Jr." },
            phone: { countryCode: "1", number: "4155551234" },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDate: { day: "1", month: "1", year: "1980" },
            governmentID: { ssn: "123-45-6789" },
            responsibilities: { isOwner: true, ownershipPercentage: 40, isController: true },
        };
        const rawResponseBody = {
            id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            name: { firstName: "John", middleName: "Quincy", lastName: "Adams", suffix: "Jr." },
            phone: { countryCode: "1", number: "4155551234" },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDateProvided: true,
            governmentIDProvided: true,
            responsibilities: { isOwner: true, ownershipPercentage: 40, isController: true },
            createdOn: "2024-01-01T00:00:00Z",
            updatedOn: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/representative/rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.representative.update(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            {
                name: {
                    firstName: "John",
                    middleName: "Quincy",
                    lastName: "Adams",
                    suffix: "Jr.",
                },
                phone: {
                    countryCode: "1",
                    number: "4155551234",
                },
                email: "john.doe@acme.com",
                address: {
                    addressLine1: "123 Main St",
                    addressLine2: "Unit 1",
                    city: "San Francisco",
                    stateOrProvince: "CA",
                    postalCode: "94105",
                    country: "US",
                },
                birthDate: {
                    day: "1",
                    month: "1",
                    year: "1980",
                },
                governmentId: {
                    ssn: "123-45-6789",
                },
                responsibilities: {
                    isOwner: true,
                    ownershipPercentage: 40,
                    isController: true,
                },
            },
        );
        expect(response).toEqual({
            id: "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            name: {
                firstName: "John",
                middleName: "Quincy",
                lastName: "Adams",
                suffix: "Jr.",
            },
            phone: {
                countryCode: "1",
                number: "4155551234",
            },
            email: "john.doe@acme.com",
            address: {
                addressLine1: "123 Main St",
                addressLine2: "Unit 1",
                city: "San Francisco",
                stateOrProvince: "CA",
                postalCode: "94105",
                country: "US",
            },
            birthDateProvided: true,
            governmentIdProvided: true,
            responsibilities: {
                isOwner: true,
                ownershipPercentage: 40,
                isController: true,
            },
            createdOn: new Date("2024-01-01T00:00:00.000Z"),
            updatedOn: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/representative/rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            )
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.representative.delete(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "rep_7df2974a-4069-454c-912f-7e58ebe030fb",
        );
        expect(response).toEqual(undefined);
    });
});
