/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("Notifications", () => {
    test("find", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            count: 2,
            hasMore: false,
            data: [
                {
                    id: "notif_7df2974a-4069-454c-912f-7e58ebe030fb",
                    invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                    type: "INVOICE_APPROVAL_NEEDED",
                    status: "SENT",
                    createdAt: "2024-01-01T00:00:00Z",
                },
                {
                    id: "notif_958c4ffb-dc06-494c-a0e0-1b4946c6bb0f",
                    invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                    type: "INVOICE_APPROVED",
                    status: "SENT",
                    createdAt: "2024-01-01T00:00:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/user/user_e24fc81c-c5ee-47e8-af42-4fe29d895506/notifications",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.notifications.find(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        );
        expect(response).toEqual({
            count: 2,
            hasMore: false,
            data: [
                {
                    id: "notif_7df2974a-4069-454c-912f-7e58ebe030fb",
                    invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                    type: "INVOICE_APPROVAL_NEEDED",
                    status: "SENT",
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                },
                {
                    id: "notif_958c4ffb-dc06-494c-a0e0-1b4946c6bb0f",
                    invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                    type: "INVOICE_APPROVED",
                    status: "SENT",
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
            type: "INVOICE_APPROVAL_NEEDED",
            status: "SENT",
            createdAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/user/user_e24fc81c-c5ee-47e8-af42-4fe29d895506/notification/notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.notifications.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            "notif_7df2974a-4069-454c-912f-7e58ebe030fb",
        );
        expect(response).toEqual({
            id: "notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
            type: "INVOICE_APPROVAL_NEEDED",
            status: "SENT",
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { status: "READ" };
        const rawResponseBody = {
            id: "notif_958c4ffb-dc06-494c-a0e0-1b4946c6bb0f",
            invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
            type: "INVOICE_APPROVED",
            status: "READ",
            createdAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .put(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/user/user_e24fc81c-c5ee-47e8-af42-4fe29d895506/notification/notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.notifications.update(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            "notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            {
                status: "READ",
            },
        );
        expect(response).toEqual({
            id: "notif_958c4ffb-dc06-494c-a0e0-1b4946c6bb0f",
            invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
            type: "INVOICE_APPROVED",
            status: "READ",
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });
});
