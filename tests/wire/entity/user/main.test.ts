/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("User", () => {
    test("find", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                    foreignId: "MY-DB-ID-12345",
                    email: "john.doe@acme.com",
                    name: "John Doe",
                    roles: ["admin", "approver"],
                    createdAt: "2024-01-01T00:00:00Z",
                    updatedAt: "2024-01-01T00:00:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/users")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.find("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced", {
            name: "John",
        });
        expect(response).toEqual({
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                    foreignId: "MY-DB-ID-12345",
                    email: "john.doe@acme.com",
                    name: "John Doe",
                    roles: ["admin", "approver"],
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                    updatedAt: new Date("2024-01-01T00:00:00.000Z"),
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
        };
        const rawResponseBody = {
            id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
            createdAt: "2024-01-01T00:00:00Z",
            updatedAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/user")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.create("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced", {
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
        });
        expect(response).toEqual({
            id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
            updatedAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
            createdAt: "2024-01-01T00:00:00Z",
            updatedAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/user/user_ec3aafc8-ea86-408a-a6c1-545497badbbb")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.get(
            "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
        );
        expect(response).toEqual({
            id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
            updatedAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
        };
        const rawResponseBody = {
            id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
            createdAt: "2024-01-01T00:00:00Z",
            updatedAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/user/user_ec3aafc8-ea86-408a-a6c1-545497badbbb")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.update(
            "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            {
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
            },
        );
        expect(response).toEqual({
            id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            foreignId: "MY-DB-ID-12345",
            email: "john.doe@acme.com",
            name: "John Doe",
            roles: ["admin", "approver"],
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
            updatedAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server.mockEndpoint().delete("/entity/entityId/user/userId").respondWith().statusCode(200).build();

        const response = await client.entity.user.delete("entityId", "userId");
        expect(response).toEqual(undefined);
    });

    test("getToken", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { expiresIn: "1h" };
        const rawResponseBody =
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o";
        server
            .mockEndpoint()
            .post(
                "/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/user/user_a0f6ea94-0761-4a5e-a416-3c453cb7eced/token",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.getToken(
            "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            "user_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            {
                expiresIn: "1h",
            },
        );
        expect(response).toEqual(
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o",
        );
    });
});
