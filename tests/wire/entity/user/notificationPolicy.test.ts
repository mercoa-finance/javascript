/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("NotificationPolicy", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            { disabled: true, digest: false, immediate: true, type: "INVOICE_APPROVED" },
            { disabled: false, digest: true, immediate: false, type: "INVOICE_APPROVAL_NEEDED" },
            { disabled: false, digest: false, immediate: true, type: "INVOICE_PAID" },
        ];
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/user/user_e24fc81c-c5ee-47e8-af42-4fe29d895506/notification-policies",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.notificationPolicy.getAll(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        );
        expect(response).toEqual([
            {
                disabled: true,
                digest: false,
                immediate: true,
                type: "INVOICE_APPROVED",
            },
            {
                disabled: false,
                digest: true,
                immediate: false,
                type: "INVOICE_APPROVAL_NEEDED",
            },
            {
                disabled: false,
                digest: false,
                immediate: true,
                type: "INVOICE_PAID",
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = { disabled: true, digest: false, immediate: true, type: "INVOICE_APPROVED" };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/user/user_e24fc81c-c5ee-47e8-af42-4fe29d895506/notification-policy/INVOICE_APPROVED",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.notificationPolicy.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            "INVOICE_APPROVED",
        );
        expect(response).toEqual({
            disabled: true,
            digest: false,
            immediate: true,
            type: "INVOICE_APPROVED",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { disabled: true };
        const rawResponseBody = { disabled: true, digest: false, immediate: true, type: "INVOICE_APPROVED" };
        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/user/user_e24fc81c-c5ee-47e8-af42-4fe29d895506/notification-policy/INVOICE_APPROVED",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.user.notificationPolicy.update(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            "INVOICE_APPROVED",
            {
                disabled: true,
            },
        );
        expect(response).toEqual({
            disabled: true,
            digest: false,
            immediate: true,
            type: "INVOICE_APPROVED",
        });
    });
});
