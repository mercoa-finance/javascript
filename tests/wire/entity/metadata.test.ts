/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Metadata", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                key: "propertyId",
                value: ["{key: 'prop_123', value: 'Beach Rental'}", "{key: 'prop_456', value: 'City Rental'}"],
            },
            { key: "projectId", value: ["proj_123"] },
        ];
        server
            .mockEndpoint()
            .get("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/metadata")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.metadata.getAll("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced");
        expect(response).toEqual([
            {
                key: "propertyId",
                value: ["{key: 'prop_123', value: 'Beach Rental'}", "{key: 'prop_456', value: 'City Rental'}"],
            },
            {
                key: "projectId",
                value: ["proj_123"],
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = ["{key: 'prop_123', value: 'Beach Rental'}", "{key: 'prop_456', value: 'City Rental'}"];
        server
            .mockEndpoint()
            .get("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/metadata/propertyId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.metadata.get("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced", "propertyId");
        expect(response).toEqual([
            "{key: 'prop_123', value: 'Beach Rental'}",
            "{key: 'prop_456', value: 'City Rental'}",
        ]);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = ["{key: 'prop_123', value: 'Beach Rental'}", "{key: 'prop_456', value: 'City Rental'}"];
        const rawResponseBody = ["{key: 'prop_123', value: 'Beach Rental'}", "{key: 'prop_456', value: 'City Rental'}"];
        server
            .mockEndpoint()
            .post("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/metadata/propertyId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.metadata.update("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced", "propertyId", [
            "{key: 'prop_123', value: 'Beach Rental'}",
            "{key: 'prop_456', value: 'City Rental'}",
        ]);
        expect(response).toEqual([
            "{key: 'prop_123', value: 'Beach Rental'}",
            "{key: 'prop_456', value: 'City Rental'}",
        ]);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/entity/ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced/metadata/propertyId")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.metadata.delete("ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced", "propertyId");
        expect(response).toEqual(undefined);
    });
});
