/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("NotificationPolicy", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                disabled: false,
                additionalRoles: ["admin", "approver"],
                additionalUsers: ["user_1234"],
                type: "INVOICE_APPROVAL_NEEDED",
                notifyPayeeCounterparty: true,
                notifyPayorCounterparty: true,
            },
            {
                disabled: false,
                additionalRoles: ["admin", "bookkeeper"],
                additionalUsers: [],
                type: "INVOICE_APPROVED",
                notifyPayeeCounterparty: false,
                notifyPayorCounterparty: true,
            },
        ];
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/notification-policies")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.notificationPolicy.getAll("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c");
        expect(response).toEqual([
            {
                disabled: false,
                additionalRoles: ["admin", "approver"],
                additionalUsers: ["user_1234"],
                type: "INVOICE_APPROVAL_NEEDED",
                notifyPayeeCounterparty: true,
                notifyPayorCounterparty: true,
            },
            {
                disabled: false,
                additionalRoles: ["admin", "bookkeeper"],
                additionalUsers: [],
                type: "INVOICE_APPROVED",
                notifyPayeeCounterparty: false,
                notifyPayorCounterparty: true,
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            disabled: false,
            additionalRoles: ["admin", "approver"],
            additionalUsers: ["user_1234"],
            type: "INVOICE_APPROVAL_NEEDED",
            notifyPayeeCounterparty: true,
            notifyPayorCounterparty: true,
        };
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/notification-policy/INVOICE_APPROVAL_NEEDED")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.notificationPolicy.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "INVOICE_APPROVAL_NEEDED",
        );
        expect(response).toEqual({
            disabled: false,
            additionalRoles: ["admin", "approver"],
            additionalUsers: ["user_1234"],
            type: "INVOICE_APPROVAL_NEEDED",
            notifyPayeeCounterparty: true,
            notifyPayorCounterparty: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { disabled: false, additionalRoles: ["admin", "approver"] };
        const rawResponseBody = {
            disabled: false,
            additionalRoles: ["admin", "approver"],
            additionalUsers: ["user_1234"],
            type: "INVOICE_APPROVAL_NEEDED",
            notifyPayeeCounterparty: true,
            notifyPayorCounterparty: true,
        };
        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/notification-policy/INVOICE_APPROVAL_NEEDED")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.notificationPolicy.update(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "INVOICE_APPROVAL_NEEDED",
            {
                disabled: false,
                additionalRoles: ["admin", "approver"],
            },
        );
        expect(response).toEqual({
            disabled: false,
            additionalRoles: ["admin", "approver"],
            additionalUsers: ["user_1234"],
            type: "INVOICE_APPROVAL_NEEDED",
            notifyPayeeCounterparty: true,
            notifyPayorCounterparty: true,
        });
    });
});
