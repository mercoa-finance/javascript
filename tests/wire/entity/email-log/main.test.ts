/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("EmailLog", () => {
    test("find", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "1234",
                    status: "PROCESSED",
                    subject: "Invoice #1234",
                    from: "John Doe <john.doe@example.com>",
                    to: "Jane Doe <jane.doe@example.com>",
                    htmlBody:
                        "<html><body><p>Hi Jane,</p><p>Please find attached the invoice for your recent purchase.</p><p>Thanks,</p><p>John</p></body></html>",
                    textBody: "Hi Jane,\n\nPlease find attached the invoice for your recent purchase.\n\nThanks,\nJohn",
                    createdAt: "2021-01-01T00:00:00Z",
                    attachment: { filename: "invoice.pdf", contentType: "application/pdf" },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/emailLogs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.emailLog.find("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c");
        expect(response).toEqual({
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "1234",
                    status: "PROCESSED",
                    subject: "Invoice #1234",
                    from: "John Doe <john.doe@example.com>",
                    to: "Jane Doe <jane.doe@example.com>",
                    htmlBody:
                        "<html><body><p>Hi Jane,</p><p>Please find attached the invoice for your recent purchase.</p><p>Thanks,</p><p>John</p></body></html>",
                    textBody: "Hi Jane,\n\nPlease find attached the invoice for your recent purchase.\n\nThanks,\nJohn",
                    createdAt: new Date("2021-01-01T00:00:00.000Z"),
                    attachment: {
                        filename: "invoice.pdf",
                        contentType: "application/pdf",
                    },
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "1234",
            status: "PROCESSED",
            subject: "Invoice #1234",
            from: "John Doe <john.doe@example.com>",
            to: "Jane Doe <jane.doe@example.com>",
            htmlBody:
                "<html><body><p>Hi Jane,</p><p>Please find attached the invoice for your recent purchase.</p><p>Thanks,</p><p>John</p></body></html>",
            textBody: "Hi Jane,\n\nPlease find attached the invoice for your recent purchase.\n\nThanks,\nJohn",
            createdAt: "2021-01-01T00:00:00Z",
            attachment: { filename: "invoice.pdf", contentType: "application/pdf" },
        };
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/emailLog/log_8545a84e-a45f-41bf-bdf1-33b42a55812c")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.emailLog.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "log_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        );
        expect(response).toEqual({
            id: "1234",
            status: "PROCESSED",
            subject: "Invoice #1234",
            from: "John Doe <john.doe@example.com>",
            to: "Jane Doe <jane.doe@example.com>",
            htmlBody:
                "<html><body><p>Hi Jane,</p><p>Please find attached the invoice for your recent purchase.</p><p>Thanks,</p><p>John</p></body></html>",
            textBody: "Hi Jane,\n\nPlease find attached the invoice for your recent purchase.\n\nThanks,\nJohn",
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            attachment: {
                filename: "invoice.pdf",
                contentType: "application/pdf",
            },
        });
    });
});
