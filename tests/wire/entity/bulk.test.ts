/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Bulk", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            connectedEntity: {
                id: "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                linkCreatedAsPayor: false,
                linkCreatedAsPayee: true,
            },
            entities: [
                {
                    isCustomer: true,
                    isPayor: true,
                    isPayee: false,
                    accountType: "business",
                    foreignId: "MY-DB-ID-12345",
                    profile: {
                        business: {
                            email: "customer@acme.com",
                            legalBusinessName: "Acme Inc.",
                            website: "http://www.acme.com",
                            businessType: "llc",
                            phone: { countryCode: "1", number: "4155551234" },
                            address: {
                                addressLine1: "123 Main St",
                                addressLine2: "Unit 1",
                                city: "San Francisco",
                                stateOrProvince: "CA",
                                postalCode: "94105",
                                country: "US",
                            },
                            taxId: { ein: { number: "12-3456789" } },
                        },
                    },
                },
            ],
        };
        const rawResponseBody = {
            data: [
                { id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d", foreignId: "YOUR-ENTITY-ID" },
                { error: "Entity creation failed", foreignId: "YOUR-SECOND-ENTITY-ID" },
            ],
        };
        server
            .mockEndpoint()
            .post("/entities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.bulk.create({
            body: {
                connectedEntity: {
                    id: "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                    linkCreatedAsPayor: false,
                    linkCreatedAsPayee: true,
                },
                entities: [
                    {
                        isCustomer: true,
                        isPayor: true,
                        isPayee: false,
                        accountType: "business",
                        foreignId: "MY-DB-ID-12345",
                        profile: {
                            business: {
                                email: "customer@acme.com",
                                legalBusinessName: "Acme Inc.",
                                website: "http://www.acme.com",
                                businessType: "llc",
                                phone: {
                                    countryCode: "1",
                                    number: "4155551234",
                                },
                                address: {
                                    addressLine1: "123 Main St",
                                    addressLine2: "Unit 1",
                                    city: "San Francisco",
                                    stateOrProvince: "CA",
                                    postalCode: "94105",
                                    country: "US",
                                },
                                taxId: {
                                    ein: {
                                        number: "12-3456789",
                                    },
                                },
                            },
                        },
                    },
                ],
            },
        });
        expect(response).toEqual({
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "YOUR-ENTITY-ID",
                },
                {
                    error: "Entity creation failed",
                    foreignId: "YOUR-SECOND-ENTITY-ID",
                },
            ],
        });
    });

    test("download", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = { url: "https://mercoa.com/download/bulk-invoices.csv", mimeType: "text/csv" };
        server.mockEndpoint().get("/entities/download").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entity.bulk.download({
            format: "CSV",
        });
        expect(response).toEqual({
            url: "https://mercoa.com/download/bulk-invoices.csv",
            mimeType: "text/csv",
        });
    });
});
