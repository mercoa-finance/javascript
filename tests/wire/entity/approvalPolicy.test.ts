/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("ApprovalPolicy", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                trigger: [],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: {
                        type: "userList",
                        value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    },
                },
                upstreamPolicyId: "root",
                updatedAt: "2024-01-02T00:00:00Z",
                createdAt: "2024-01-01T00:00:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/approval-policies")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.approvalPolicy.getAll("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c");
        expect(response).toEqual([
            {
                id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                trigger: [],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: {
                        type: "userList",
                        value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    },
                },
                upstreamPolicyId: "root",
                updatedAt: new Date("2024-01-02T00:00:00.000Z"),
                createdAt: new Date("2024-01-01T00:00:00.000Z"),
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
        };
        const rawResponseBody = {
            id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
            updatedAt: "2024-01-02T00:00:00Z",
            createdAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/approval-policy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.approvalPolicy.create("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
        });
        expect(response).toEqual({
            id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
            updatedAt: new Date("2024-01-02T00:00:00.000Z"),
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
            updatedAt: "2024-01-02T00:00:00Z",
            createdAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/approval-policy/apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.approvalPolicy.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
        );
        expect(response).toEqual({
            id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
            updatedAt: new Date("2024-01-02T00:00:00.000Z"),
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
        };
        const rawResponseBody = {
            id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
            updatedAt: "2024-01-02T00:00:00Z",
            createdAt: "2024-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/approval-policy/apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.approvalPolicy.update(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            {
                trigger: [],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: {
                        type: "userList",
                        value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    },
                },
                upstreamPolicyId: "root",
            },
        );
        expect(response).toEqual({
            id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            trigger: [],
            rule: {
                type: "approver",
                numApprovers: 2,
                identifierList: {
                    type: "userList",
                    value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                },
            },
            upstreamPolicyId: "root",
            updatedAt: new Date("2024-01-02T00:00:00.000Z"),
            createdAt: new Date("2024-01-01T00:00:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/approval-policy/apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            )
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.approvalPolicy.delete(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
        );
        expect(response).toEqual(undefined);
    });

    test("history", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                policies: [
                    {
                        id: "id",
                        trigger: [
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: { type: "rolesList", value: ["identifierList", "identifierList"] },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    {
                        id: "id",
                        trigger: [
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: { type: "rolesList", value: ["identifierList", "identifierList"] },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                ],
                userId: "userId",
                createdAt: "2024-01-15T09:30:00Z",
            },
            {
                id: "id",
                policies: [
                    {
                        id: "id",
                        trigger: [
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: { type: "rolesList", value: ["identifierList", "identifierList"] },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    {
                        id: "id",
                        trigger: [
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                            { type: "amount", amount: 1.1, currency: "AED", comparison: "eq" },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: { type: "rolesList", value: ["identifierList", "identifierList"] },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: "2024-01-15T09:30:00Z",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                ],
                userId: "userId",
                createdAt: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/entity/entityId/approval-policies/history")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.approvalPolicy.history("entityId");
        expect(response).toEqual([
            {
                id: "id",
                policies: [
                    {
                        id: "id",
                        trigger: [
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: {
                                type: "rolesList",
                                value: ["identifierList", "identifierList"],
                            },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: new Date("2024-01-15T09:30:00.000Z"),
                        updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    },
                    {
                        id: "id",
                        trigger: [
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: {
                                type: "rolesList",
                                value: ["identifierList", "identifierList"],
                            },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: new Date("2024-01-15T09:30:00.000Z"),
                        updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    },
                ],
                userId: "userId",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
            },
            {
                id: "id",
                policies: [
                    {
                        id: "id",
                        trigger: [
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: {
                                type: "rolesList",
                                value: ["identifierList", "identifierList"],
                            },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: new Date("2024-01-15T09:30:00.000Z"),
                        updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    },
                    {
                        id: "id",
                        trigger: [
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                            {
                                type: "amount",
                                amount: 1.1,
                                currency: "AED",
                                comparison: "eq",
                            },
                        ],
                        rule: {
                            type: "approver",
                            numApprovers: 1,
                            identifierList: {
                                type: "rolesList",
                                value: ["identifierList", "identifierList"],
                            },
                            autoAssign: true,
                        },
                        upstreamPolicyId: "upstreamPolicyId",
                        createdAt: new Date("2024-01-15T09:30:00.000Z"),
                        updatedAt: new Date("2024-01-15T09:30:00.000Z"),
                    },
                ],
                userId: "userId",
                createdAt: new Date("2024-01-15T09:30:00.000Z"),
            },
        ]);
    });

    test("restore", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                trigger: [],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: {
                        type: "userList",
                        value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    },
                },
                upstreamPolicyId: "root",
                updatedAt: "2024-01-02T00:00:00Z",
                createdAt: "2024-01-01T00:00:00Z",
            },
            {
                id: "apvl_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                trigger: [{ type: "amount", amount: 100, currency: "USD" }],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: { type: "rolesList", value: ["Admin", "Controller"] },
                },
                upstreamPolicyId: "root",
                updatedAt: "2024-01-02T00:00:00Z",
                createdAt: "2024-01-01T00:00:00Z",
            },
        ];
        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/approval-policies/history/hist_21661ac1-a2a8-4465-a6c0-64474ba8181d/restore",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.approvalPolicy.restore(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "hist_21661ac1-a2a8-4465-a6c0-64474ba8181d",
        );
        expect(response).toEqual([
            {
                id: "apvl_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                trigger: [],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: {
                        type: "userList",
                        value: ["usr_8545a84e-a45f-41bf-bdf1-33b42a55812c", "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    },
                },
                upstreamPolicyId: "root",
                updatedAt: new Date("2024-01-02T00:00:00.000Z"),
                createdAt: new Date("2024-01-01T00:00:00.000Z"),
            },
            {
                id: "apvl_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                trigger: [
                    {
                        type: "amount",
                        amount: 100,
                        currency: "USD",
                    },
                ],
                rule: {
                    type: "approver",
                    numApprovers: 2,
                    identifierList: {
                        type: "rolesList",
                        value: ["Admin", "Controller"],
                    },
                },
                upstreamPolicyId: "root",
                updatedAt: new Date("2024-01-02T00:00:00.000Z"),
                createdAt: new Date("2024-01-01T00:00:00.000Z"),
            },
        ]);
    });
});
