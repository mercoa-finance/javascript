/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("Counterparty", () => {
    test("findPayees", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "MY-DB-ID-90909",
                    name: "Big Box Store",
                    email: "vendor@bigboxstore.com",
                    acceptedTos: false,
                    status: "unverified",
                    isCustomer: false,
                    isPayor: false,
                    isPayee: true,
                    isNetworkPayor: false,
                    isNetworkPayee: false,
                    accountType: "business",
                    updatedAt: "2024-01-02T00:00:00Z",
                    createdAt: "2024-01-01T00:00:00Z",
                    profile: {
                        business: {
                            email: "vendor@bigboxstore.com",
                            legalBusinessName: "Big Box Store",
                            businessType: "publicCorporation",
                            taxIDProvided: false,
                            ownersProvided: false,
                        },
                    },
                    paymentMethods: [
                        {
                            id: "pm_7610541f-4619-4033-8620-cfccfb811293",
                            type: "bankAccount",
                            accountName: "Vendor Checking Account",
                            bankName: "Chase",
                            routingNumber: "66554433",
                            accountNumber: "55934059697648",
                            accountType: "CHECKING",
                            status: "NEW",
                            isDefaultSource: true,
                            isDefaultDestination: true,
                            supportedCurrencies: ["USD"],
                            metadata: {},
                            frozen: false,
                            confirmedByEntity: false,
                            createdAt: "2021-01-01T00:00:00Z",
                            updatedAt: "2021-01-01T00:00:00Z",
                        },
                    ],
                    counterpartyType: ["ENTITY"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparties/payees")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.counterparty.findPayees("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            name: "Big Box",
            paymentMethods: true,
            invoiceMetrics: true,
        });
        expect(response).toEqual({
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "MY-DB-ID-90909",
                    name: "Big Box Store",
                    email: "vendor@bigboxstore.com",
                    acceptedTos: false,
                    status: "unverified",
                    isCustomer: false,
                    isPayor: false,
                    isPayee: true,
                    isNetworkPayor: false,
                    isNetworkPayee: false,
                    accountType: "business",
                    updatedAt: new Date("2024-01-02T00:00:00.000Z"),
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                    profile: {
                        business: {
                            email: "vendor@bigboxstore.com",
                            legalBusinessName: "Big Box Store",
                            businessType: "publicCorporation",
                            taxIdProvided: false,
                            ownersProvided: false,
                        },
                    },
                    paymentMethods: [
                        {
                            type: "bankAccount",
                            id: "pm_7610541f-4619-4033-8620-cfccfb811293",
                            accountName: "Vendor Checking Account",
                            bankName: "Chase",
                            routingNumber: "66554433",
                            accountNumber: "55934059697648",
                            accountType: "CHECKING",
                            status: "NEW",
                            isDefaultSource: true,
                            isDefaultDestination: true,
                            supportedCurrencies: ["USD"],
                            metadata: {},
                            frozen: false,
                            confirmedByEntity: false,
                            createdAt: new Date("2021-01-01T00:00:00.000Z"),
                            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                        },
                    ],
                    counterpartyType: ["ENTITY"],
                },
            ],
        });
    });

    test("findPayors", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "MY-DB-ID-90909",
                    name: "Big Box Store",
                    email: "vendor@bigboxstore.com",
                    acceptedTos: false,
                    status: "unverified",
                    isCustomer: false,
                    isPayor: false,
                    isPayee: true,
                    isNetworkPayor: false,
                    isNetworkPayee: false,
                    accountType: "business",
                    updatedAt: "2024-01-02T00:00:00Z",
                    createdAt: "2024-01-01T00:00:00Z",
                    profile: {
                        business: {
                            email: "vendor@bigboxstore.com",
                            legalBusinessName: "Big Box Store",
                            businessType: "publicCorporation",
                            taxIDProvided: false,
                            ownersProvided: false,
                        },
                    },
                    paymentMethods: [
                        {
                            id: "pm_7610541f-4619-4033-8620-cfccfb811293",
                            type: "bankAccount",
                            accountName: "Vendor Checking Account",
                            bankName: "Chase",
                            routingNumber: "66554433",
                            accountNumber: "55934059697648",
                            accountType: "CHECKING",
                            status: "NEW",
                            isDefaultSource: true,
                            isDefaultDestination: true,
                            supportedCurrencies: ["USD"],
                            metadata: {},
                            frozen: false,
                            confirmedByEntity: false,
                            createdAt: "2021-01-01T00:00:00Z",
                            updatedAt: "2021-01-01T00:00:00Z",
                        },
                    ],
                    counterpartyType: ["ENTITY"],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparties/payors")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.counterparty.findPayors("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            name: "Big Box",
            paymentMethods: true,
            invoiceMetrics: true,
        });
        expect(response).toEqual({
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "MY-DB-ID-90909",
                    name: "Big Box Store",
                    email: "vendor@bigboxstore.com",
                    acceptedTos: false,
                    status: "unverified",
                    isCustomer: false,
                    isPayor: false,
                    isPayee: true,
                    isNetworkPayor: false,
                    isNetworkPayee: false,
                    accountType: "business",
                    updatedAt: new Date("2024-01-02T00:00:00.000Z"),
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                    profile: {
                        business: {
                            email: "vendor@bigboxstore.com",
                            legalBusinessName: "Big Box Store",
                            businessType: "publicCorporation",
                            taxIdProvided: false,
                            ownersProvided: false,
                        },
                    },
                    paymentMethods: [
                        {
                            type: "bankAccount",
                            id: "pm_7610541f-4619-4033-8620-cfccfb811293",
                            accountName: "Vendor Checking Account",
                            bankName: "Chase",
                            routingNumber: "66554433",
                            accountNumber: "55934059697648",
                            accountType: "CHECKING",
                            status: "NEW",
                            isDefaultSource: true,
                            isDefaultDestination: true,
                            supportedCurrencies: ["USD"],
                            metadata: {},
                            frozen: false,
                            confirmedByEntity: false,
                            createdAt: new Date("2021-01-01T00:00:00.000Z"),
                            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                        },
                    ],
                    counterpartyType: ["ENTITY"],
                },
            ],
        });
    });

    test("addPayees", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [{ accountId: "85866843", postalCode: "94105", nameOnAccount: "John Doe" }],
                },
            ],
        };

        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/addPayees")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.counterparty.addPayees("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [
                        {
                            accountId: "85866843",
                            postalCode: "94105",
                            nameOnAccount: "John Doe",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("hidePayees", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"] };

        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/hidePayees")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.counterparty.hidePayees("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
        });
        expect(response).toEqual(undefined);
    });

    test("addPayors", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [{ accountId: "85866843", postalCode: "94105", nameOnAccount: "John Doe" }],
                },
            ],
        };

        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/addPayors")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.counterparty.addPayors("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [
                        {
                            accountId: "85866843",
                            postalCode: "94105",
                            nameOnAccount: "John Doe",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("hidePayors", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"] };

        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/hidePayors")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.counterparty.hidePayors("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
        });
        expect(response).toEqual(undefined);
    });
});
