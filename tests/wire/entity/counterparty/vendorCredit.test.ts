/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("VendorCredit", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
                    memoNumber: "123456",
                    totalAmount: 100,
                    remainingAmount: 100,
                    currency: "USD",
                    vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    note: "This is a note",
                    invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
                    createdAt: "2021-01-01T00:00:00Z",
                    updatedAt: "2021-01-01T00:00:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparty/ent_21661ac1-a2a8-4465-a6c0-64474ba8181d/vendor-credits",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.counterparty.vendorCredit.getAll(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
        );
        expect(response).toEqual({
            count: 1,
            hasMore: false,
            data: [
                {
                    id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
                    memoNumber: "123456",
                    totalAmount: 100,
                    remainingAmount: 100,
                    currency: "USD",
                    vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    note: "This is a note",
                    invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
                    createdAt: new Date("2021-01-01T00:00:00.000Z"),
                    updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            memoNumber: "123456",
            totalAmount: 100,
            remainingAmount: 100,
            currency: "USD",
            vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            note: "This is a note",
            invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparty/ent_21661ac1-a2a8-4465-a6c0-64474ba8181d/vendor-credit/vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.counterparty.vendorCredit.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
        );
        expect(response).toEqual({
            id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            memoNumber: "123456",
            totalAmount: 100,
            remainingAmount: 100,
            currency: "USD",
            vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            note: "This is a note",
            invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { totalAmount: 100, currency: "USD", note: "This is a note" };
        const rawResponseBody = {
            id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            memoNumber: "123456",
            totalAmount: 100,
            remainingAmount: 100,
            currency: "USD",
            vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            note: "This is a note",
            invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparty/ent_21661ac1-a2a8-4465-a6c0-64474ba8181d/vendor-credit",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.counterparty.vendorCredit.create(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            {
                totalAmount: 100,
                currency: "USD",
                note: "This is a note",
            },
        );
        expect(response).toEqual({
            id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            memoNumber: "123456",
            totalAmount: 100,
            remainingAmount: 100,
            currency: "USD",
            vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            note: "This is a note",
            invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparty/ent_21661ac1-a2a8-4465-a6c0-64474ba8181d/vendor-credit/vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            )
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.counterparty.vendorCredit.delete(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
        );
        expect(response).toEqual(undefined);
    });

    test("estimateUsage", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            remainingAmount: 50,
            currency: "USD",
            vendorCredits: [
                {
                    id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
                    memoNumber: "123456",
                    totalAmount: 100,
                    remainingAmount: 0,
                    currency: "USD",
                    vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    note: "This is a note",
                    invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
                    createdAt: "2021-01-01T00:00:00Z",
                    updatedAt: "2021-01-01T00:00:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/counterparty/ent_21661ac1-a2a8-4465-a6c0-64474ba8181d/vendor-credits/estimate-usage",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.counterparty.vendorCredit.estimateUsage(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            {
                amount: 150,
                currency: "USD",
            },
        );
        expect(response).toEqual({
            remainingAmount: 50,
            currency: "USD",
            vendorCredits: [
                {
                    id: "vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
                    memoNumber: "123456",
                    totalAmount: 100,
                    remainingAmount: 0,
                    currency: "USD",
                    vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creatorEntityId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    note: "This is a note",
                    invoiceIds: ["in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9"],
                    createdAt: new Date("2021-01-01T00:00:00.000Z"),
                    updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                },
            ],
        });
    });
});
