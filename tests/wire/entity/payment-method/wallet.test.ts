/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("Wallet", () => {
    test("getWalletBalance", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            paymentMethodId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            entityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            availableBalance: { amount: 100, currency: "USD" },
            pendingBalance: { amount: 5, currency: "USD" },
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769/wallet-balance",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.wallet.getWalletBalance(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        );
        expect(response).toEqual({
            paymentMethodId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            entityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            availableBalance: {
                amount: 100,
                currency: "USD",
            },
            pendingBalance: {
                amount: 5,
                currency: "USD",
            },
        });
    });

    test("addWalletFunds", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            amount: 100,
            currency: "USD",
            sourcePaymentMethodId: "pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
        };

        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769/add-wallet-funds",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.paymentMethod.wallet.addWalletFunds(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            {
                amount: 100,
                currency: "USD",
                sourcePaymentMethodId: "pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
            },
        );
        expect(response).toEqual(undefined);
    });

    test("withdrawWalletFunds", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            amount: 100,
            currency: "USD",
            destinationPaymentMethodId: "pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
        };

        server
            .mockEndpoint()
            .post(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769/withdraw-wallet-funds",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.paymentMethod.wallet.withdrawWalletFunds(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            {
                amount: 100,
                currency: "USD",
                destinationPaymentMethodId: "pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
            },
        );
        expect(response).toEqual(undefined);
    });
});
