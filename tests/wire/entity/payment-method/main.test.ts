/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("PaymentMethod", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                type: "bankAccount",
                accountName: "My Checking Account",
                bankName: "Chase",
                routingNumber: "12345678",
                accountNumber: "99988767623",
                accountType: "CHECKING",
                status: "VERIFIED",
                isDefaultSource: true,
                isDefaultDestination: true,
                supportedCurrencies: ["USD"],
                metadata: {},
                frozen: false,
                confirmedByEntity: true,
                createdAt: "2021-01-01T00:00:00Z",
                updatedAt: "2021-01-01T00:00:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethods")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.getAll("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c");
        expect(response).toEqual([
            {
                type: "bankAccount",
                id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                accountName: "My Checking Account",
                bankName: "Chase",
                routingNumber: "12345678",
                accountNumber: "99988767623",
                accountType: "CHECKING",
                status: "VERIFIED",
                isDefaultSource: true,
                isDefaultDestination: true,
                supportedCurrencies: ["USD"],
                metadata: {},
                frozen: false,
                confirmedByEntity: true,
                createdAt: new Date("2021-01-01T00:00:00.000Z"),
                updatedAt: new Date("2021-01-01T00:00:00.000Z"),
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            type: "bankAccount",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
        };
        const rawResponseBody = {
            id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            type: "bankAccount",
            accountName: "My Checking Account",
            bankName: "Chase",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
            status: "VERIFIED",
            isDefaultSource: true,
            isDefaultDestination: true,
            supportedCurrencies: ["USD"],
            metadata: {},
            frozen: false,
            confirmedByEntity: true,
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.create("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            type: "bankAccount",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
        });
        expect(response).toEqual({
            type: "bankAccount",
            id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            accountName: "My Checking Account",
            bankName: "Chase",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
            status: "VERIFIED",
            isDefaultSource: true,
            isDefaultDestination: true,
            supportedCurrencies: ["USD"],
            metadata: {},
            frozen: false,
            confirmedByEntity: true,
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            type: "bankAccount",
            accountName: "My Checking Account",
            bankName: "Chase",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
            status: "VERIFIED",
            isDefaultSource: true,
            isDefaultDestination: true,
            supportedCurrencies: ["USD"],
            metadata: {},
            frozen: false,
            confirmedByEntity: true,
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.get(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        );
        expect(response).toEqual({
            type: "bankAccount",
            id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            accountName: "My Checking Account",
            bankName: "Chase",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
            status: "VERIFIED",
            isDefaultSource: true,
            isDefaultDestination: true,
            supportedCurrencies: ["USD"],
            metadata: {},
            frozen: false,
            confirmedByEntity: true,
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { type: "bankAccount", defaultSource: true, defaultDestination: true };
        const rawResponseBody = {
            id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            type: "bankAccount",
            accountName: "My Checking Account",
            bankName: "Chase",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
            status: "VERIFIED",
            isDefaultSource: true,
            isDefaultDestination: true,
            supportedCurrencies: ["USD"],
            metadata: {},
            frozen: false,
            confirmedByEntity: true,
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .put(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.update(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            {
                type: "bankAccount",
                defaultSource: true,
                defaultDestination: true,
            },
        );
        expect(response).toEqual({
            type: "bankAccount",
            id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            accountName: "My Checking Account",
            bankName: "Chase",
            routingNumber: "12345678",
            accountNumber: "99988767623",
            accountType: "CHECKING",
            status: "VERIFIED",
            isDefaultSource: true,
            isDefaultDestination: true,
            supportedCurrencies: ["USD"],
            metadata: {},
            frozen: false,
            confirmedByEntity: true,
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entity.paymentMethod.delete(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        );
        expect(response).toEqual(undefined);
    });

    test("plaidLinkToken", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = "link-sandbox-af1a0311-da53-4636-b754-dd15cc058176";
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/plaidLinkToken")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.plaidLinkToken("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            paymentMethodId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        });
        expect(response).toEqual("link-sandbox-af1a0311-da53-4636-b754-dd15cc058176");
    });

    test("cardLinkToken", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o",
            accountId: "acc_12345",
        };
        server
            .mockEndpoint()
            .get("/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/cardLinkToken")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.cardLinkToken("ent_8545a84e-a45f-41bf-bdf1-33b42a55812c");
        expect(response).toEqual({
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o",
            accountId: "acc_12345",
        });
    });

    test("events", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    id: "evt_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                    webhookIds: ["webhook_12345"],
                    userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                    updatedByEntityId: "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                    data: {
                        id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                        type: "bankAccount",
                        accountName: "My Checking Account",
                        bankName: "Chase",
                        routingNumber: "12345678",
                        accountNumber: "99988767623",
                        accountType: "CHECKING",
                        status: "VERIFIED",
                        isDefaultSource: true,
                        isDefaultDestination: true,
                        supportedCurrencies: ["USD"],
                        metadata: {},
                        frozen: false,
                        confirmedByEntity: true,
                        createdAt: "2021-01-01T00:00:00Z",
                        updatedAt: "2021-01-01T00:00:00Z",
                    },
                    createdAt: "2024-01-01T00:00:00.000Z",
                },
            ],
            count: 1,
            hasMore: false,
        };
        server
            .mockEndpoint()
            .get(
                "/entity/ent_8545a84e-a45f-41bf-bdf1-33b42a55812c/paymentMethod/pm_4794d597-70dc-4fec-b6ec-c5988e759769/events",
            )
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entity.paymentMethod.events(
            "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        );
        expect(response).toEqual({
            data: [
                {
                    id: "evt_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                    webhookIds: ["webhook_12345"],
                    userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                    updatedByEntityId: "ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                    data: {
                        type: "bankAccount",
                        id: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                        accountName: "My Checking Account",
                        bankName: "Chase",
                        routingNumber: "12345678",
                        accountNumber: "99988767623",
                        accountType: "CHECKING",
                        status: "VERIFIED",
                        isDefaultSource: true,
                        isDefaultDestination: true,
                        supportedCurrencies: ["USD"],
                        metadata: {},
                        frozen: false,
                        confirmedByEntity: true,
                        createdAt: new Date("2021-01-01T00:00:00.000Z"),
                        updatedAt: new Date("2021-01-01T00:00:00.000Z"),
                    },
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                },
            ],
            count: 1,
            hasMore: false,
        });
    });
});
