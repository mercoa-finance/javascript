/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("NotificationConfiguration", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            { notificationType: "invoice", type: "INVOICE_APPROVAL_NEEDED", url: "url", subject: "subject" },
            { notificationType: "invoice", type: "INVOICE_APPROVAL_NEEDED", url: "url", subject: "subject" },
        ];
        server
            .mockEndpoint()
            .get("/organization/notification-configurations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.notificationConfiguration.getAll();
        expect(response).toEqual([
            {
                notificationType: "invoice",
                type: "INVOICE_APPROVAL_NEEDED",
                url: "url",
                subject: "subject",
            },
            {
                notificationType: "invoice",
                type: "INVOICE_APPROVAL_NEEDED",
                url: "url",
                subject: "subject",
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            notificationType: "invoice",
            type: "INVOICE_APPROVAL_NEEDED",
            url: "url",
            subject: "subject",
        };
        server
            .mockEndpoint()
            .get("/organization/notification-configuration/INVOICE_APPROVAL_NEEDED")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.notificationConfiguration.get("INVOICE_APPROVAL_NEEDED");
        expect(response).toEqual({
            notificationType: "invoice",
            type: "INVOICE_APPROVAL_NEEDED",
            url: "url",
            subject: "subject",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { notificationType: "invoice", url: "url" };
        const rawResponseBody = {
            notificationType: "invoice",
            type: "INVOICE_APPROVAL_NEEDED",
            url: "url",
            subject: "subject",
        };
        server
            .mockEndpoint()
            .post("/organization/notification-configuration/INVOICE_APPROVAL_NEEDED")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.notificationConfiguration.update("INVOICE_APPROVAL_NEEDED", {
            notificationType: "invoice",
            url: "url",
        });
        expect(response).toEqual({
            notificationType: "invoice",
            type: "INVOICE_APPROVAL_NEEDED",
            url: "url",
            subject: "subject",
        });
    });

    test("reset", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/organization/notification-configuration/INVOICE_APPROVAL_NEEDED")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organization.notificationConfiguration.reset("INVOICE_APPROVAL_NEEDED");
        expect(response).toEqual(undefined);
    });
});
