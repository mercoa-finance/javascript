/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { MercoaClient } from "../../../../src/Client";

describe("Counterparty", () => {
    test("addPayees", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [{ accountId: "85866843", postalCode: "94105", nameOnAccount: "John Doe" }],
                },
            ],
        };

        server
            .mockEndpoint()
            .post("/entityGroup/entg_8545a84e-a45f-41bf-bdf1-33b42a55812c/addPayees")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entityGroup.counterparty.addPayees("entg_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [
                        {
                            accountId: "85866843",
                            postalCode: "94105",
                            nameOnAccount: "John Doe",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("hidePayees", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"] };

        server
            .mockEndpoint()
            .post("/entityGroup/entg_8545a84e-a45f-41bf-bdf1-33b42a55812c/hidePayees")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entityGroup.counterparty.hidePayees("entg_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payees: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
        });
        expect(response).toEqual(undefined);
    });

    test("addPayors", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [{ accountId: "85866843", postalCode: "94105", nameOnAccount: "John Doe" }],
                },
            ],
        };

        server
            .mockEndpoint()
            .post("/entityGroup/entg_8545a84e-a45f-41bf-bdf1-33b42a55812c/addPayors")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entityGroup.counterparty.addPayors("entg_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            customizations: [
                {
                    counterpartyId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    accounts: [
                        {
                            accountId: "85866843",
                            postalCode: "94105",
                            nameOnAccount: "John Doe",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("hidePayors", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"] };

        server
            .mockEndpoint()
            .post("/entityGroup/entg_8545a84e-a45f-41bf-bdf1-33b42a55812c/hidePayors")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.entityGroup.counterparty.hidePayors("entg_8545a84e-a45f-41bf-bdf1-33b42a55812c", {
            payors: ["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
        });
        expect(response).toEqual(undefined);
    });
});
