/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Comment", () => {
    test("getAll", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
                text: "This is a comment",
                user: {
                    id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                    foreignId: "MY-DB-ID-12345",
                    email: "john.doe@acme.com",
                    name: "John Doe",
                    roles: ["admin", "approver"],
                    createdAt: "2024-01-01T00:00:00Z",
                    updatedAt: "2024-01-01T00:00:00Z",
                },
                createdAt: "2021-01-01T00:00:00Z",
                updatedAt: "2021-01-01T00:00:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/comments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.comment.getAll("in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff");
        expect(response).toEqual([
            {
                id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
                text: "This is a comment",
                user: {
                    id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                    foreignId: "MY-DB-ID-12345",
                    email: "john.doe@acme.com",
                    name: "John Doe",
                    roles: ["admin", "approver"],
                    createdAt: new Date("2024-01-01T00:00:00.000Z"),
                    updatedAt: new Date("2024-01-01T00:00:00.000Z"),
                },
                createdAt: new Date("2021-01-01T00:00:00.000Z"),
                updatedAt: new Date("2021-01-01T00:00:00.000Z"),
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { text: "This is a comment", userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506" };
        const rawResponseBody = {
            id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
            text: "This is a comment",
            user: {
                id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
                createdAt: "2024-01-01T00:00:00Z",
                updatedAt: "2024-01-01T00:00:00Z",
            },
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/comment")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.comment.create("in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff", {
            text: "This is a comment",
            userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        });
        expect(response).toEqual({
            id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
            text: "This is a comment",
            user: {
                id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
                createdAt: new Date("2024-01-01T00:00:00.000Z"),
                updatedAt: new Date("2024-01-01T00:00:00.000Z"),
            },
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
            text: "This is a comment",
            user: {
                id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
                createdAt: "2024-01-01T00:00:00Z",
                updatedAt: "2024-01-01T00:00:00Z",
            },
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .get("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/comment/ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.comment.get(
            "in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            "ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        );
        expect(response).toEqual({
            id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
            text: "This is a comment",
            user: {
                id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
                createdAt: new Date("2024-01-01T00:00:00.000Z"),
                updatedAt: new Date("2024-01-01T00:00:00.000Z"),
            },
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { text: "This is a comment", userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506" };
        const rawResponseBody = {
            id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
            text: "This is a comment",
            user: {
                id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
                createdAt: "2024-01-01T00:00:00Z",
                updatedAt: "2024-01-01T00:00:00Z",
            },
            createdAt: "2021-01-01T00:00:00Z",
            updatedAt: "2021-01-01T00:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/comment/ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.comment.update(
            "in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            "ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            {
                text: "This is a comment",
                userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            },
        );
        expect(response).toEqual({
            id: "ic_b3525b66-da94-4525-9f31-426bcf657128",
            text: "This is a comment",
            user: {
                id: "user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                foreignId: "MY-DB-ID-12345",
                email: "john.doe@acme.com",
                name: "John Doe",
                roles: ["admin", "approver"],
                createdAt: new Date("2024-01-01T00:00:00.000Z"),
                updatedAt: new Date("2024-01-01T00:00:00.000Z"),
            },
            createdAt: new Date("2021-01-01T00:00:00.000Z"),
            updatedAt: new Date("2021-01-01T00:00:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/comment/ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.invoice.comment.delete(
            "in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            "ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        );
        expect(response).toEqual(undefined);
    });
});
