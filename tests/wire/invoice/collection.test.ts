/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Collection", () => {
    test("getNextAction", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "act_c3881909-c2f8-4a1e-878a-80a9b594483c",
            type: "email",
            subject: "Invoice Past Due - Please Review",
            body: "Your invoice is now 3 days past due. Please make a payment at your earliest convenience.",
            scheduledExecutionTime: "2024-01-04T13:00:00Z",
            status: "SUGGESTED",
        };
        server
            .mockEndpoint()
            .get("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/collection/next-action")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.collection.getNextAction("in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff");
        expect(response).toEqual({
            type: "email",
            id: "act_c3881909-c2f8-4a1e-878a-80a9b594483c",
            subject: "Invoice Past Due - Please Review",
            body: "Your invoice is now 3 days past due. Please make a payment at your earliest convenience.",
            scheduledExecutionTime: new Date("2024-01-04T13:00:00.000Z"),
            status: "SUGGESTED",
        });
    });

    test("updateNextAction", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = { feedback: "Use a more stern tone" };
        const rawResponseBody = {
            id: "act_c3881909-c2f8-4a1e-878a-80a9b594483c",
            type: "email",
            subject: "Invoice Past Due - Please Review",
            body: "Your invoice is now 3 days overdue. Please arrange payment as soon as possible to avoid further follow-ups.",
            scheduledExecutionTime: "2024-01-04T13:00:00Z",
            status: "SUGGESTED",
        };
        server
            .mockEndpoint()
            .patch("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/collection/next-action")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.collection.updateNextAction("in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff", {
            feedback: "Use a more stern tone",
        });
        expect(response).toEqual({
            type: "email",
            id: "act_c3881909-c2f8-4a1e-878a-80a9b594483c",
            subject: "Invoice Past Due - Please Review",
            body: "Your invoice is now 3 days overdue. Please arrange payment as soon as possible to avoid further follow-ups.",
            scheduledExecutionTime: new Date("2024-01-04T13:00:00.000Z"),
            status: "SUGGESTED",
        });
    });

    test("approveNextAction", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = {
            id: "act_c3881909-c2f8-4a1e-878a-80a9b594483c",
            type: "email",
            subject: "Invoice Past Due - Please Review",
            body: "Your invoice is now 3 days overdue. Please arrange payment as soon as possible to avoid further follow-ups.",
            scheduledExecutionTime: "2024-01-04T13:00:00Z",
            status: "APPROVED",
        };
        server
            .mockEndpoint()
            .patch("/invoice/in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff/collection/next-action/approve")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.collection.approveNextAction("in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff");
        expect(response).toEqual({
            type: "email",
            id: "act_c3881909-c2f8-4a1e-878a-80a9b594483c",
            subject: "Invoice Past Due - Please Review",
            body: "Your invoice is now 3 days overdue. Please arrange payment as soon as possible to avoid further follow-ups.",
            scheduledExecutionTime: new Date("2024-01-04T13:00:00.000Z"),
            status: "APPROVED",
        });
    });
});
