/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("Bulk", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            invoices: [
                {
                    status: "NEW",
                    amount: 100,
                    currency: "USD",
                    invoiceDate: "2021-01-01T00:00:00Z",
                    dueDate: "2021-01-31T00:00:00Z",
                    invoiceNumber: "INV-123",
                    noteToSelf: "For the month of January",
                    payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                    vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                    paymentDestinationOptions: { type: "check", delivery: "MAIL", printDescription: true },
                    lineItems: [
                        {
                            amount: 100,
                            currency: "USD",
                            description: "Product A",
                            name: "Product A",
                            quantity: 1,
                            unitPrice: 100,
                            category: "EXPENSE",
                            serviceStartDate: "2021-01-01T00:00:00Z",
                            serviceEndDate: "2021-01-31T00:00:00Z",
                            metadata: { key1: "value1", key2: "value2" },
                            glAccountId: "600394",
                        },
                    ],
                    creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creatorUserId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                },
            ],
        };
        const rawResponseBody = {
            data: [
                { id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d", foreignId: "YOUR-INVOICE-ID" },
                { error: "Invoice creation failed", foreignId: "YOUR-SECOND-INVOICE-ID" },
            ],
        };
        server
            .mockEndpoint()
            .post("/invoices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.bulk.create({
            body: {
                invoices: [
                    {
                        status: "NEW",
                        amount: 100,
                        currency: "USD",
                        invoiceDate: new Date("2021-01-01T00:00:00.000Z"),
                        dueDate: new Date("2021-01-31T00:00:00.000Z"),
                        invoiceNumber: "INV-123",
                        noteToSelf: "For the month of January",
                        payerId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        paymentSourceId: "pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                        vendorId: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        paymentDestinationId: "pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                        paymentDestinationOptions: {
                            type: "check",
                            delivery: "MAIL",
                            printDescription: true,
                        },
                        lineItems: [
                            {
                                amount: 100,
                                currency: "USD",
                                description: "Product A",
                                name: "Product A",
                                quantity: 1,
                                unitPrice: 100,
                                category: "EXPENSE",
                                serviceStartDate: new Date("2021-01-01T00:00:00.000Z"),
                                serviceEndDate: new Date("2021-01-31T00:00:00.000Z"),
                                metadata: {
                                    key1: "value1",
                                    key2: "value2",
                                },
                                glAccountId: "600394",
                            },
                        ],
                        creatorEntityId: "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        creatorUserId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                    },
                ],
            },
        });
        expect(response).toEqual({
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "YOUR-INVOICE-ID",
                },
                {
                    error: "Invoice creation failed",
                    foreignId: "YOUR-SECOND-INVOICE-ID",
                },
            ],
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            invoices: [
                {
                    invoiceId: "inv_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    status: "NEW",
                    amount: 100,
                    currency: "USD",
                    dueDate: "2024-01-31T00:00:00Z",
                    invoiceDate: "2024-01-01T00:00:00Z",
                    invoiceNumber: "INV-001",
                    lineItems: [
                        { description: "Item 1", amount: 50, quantity: 1 },
                        { description: "Item 2", amount: 50, quantity: 1 },
                    ],
                },
            ],
        };
        const rawResponseBody = {
            data: [
                { id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d", foreignId: "YOUR-INVOICE-ID" },
                { error: "Invoice update failed", foreignId: "YOUR-SECOND-INVOICE-ID" },
            ],
        };
        server
            .mockEndpoint()
            .put("/invoices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.bulk.update({
            body: {
                invoices: [
                    {
                        invoiceId: "inv_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        status: "NEW",
                        amount: 100,
                        currency: "USD",
                        dueDate: new Date("2024-01-31T00:00:00.000Z"),
                        invoiceDate: new Date("2024-01-01T00:00:00.000Z"),
                        invoiceNumber: "INV-001",
                        lineItems: [
                            {
                                description: "Item 1",
                                amount: 50,
                                quantity: 1,
                            },
                            {
                                description: "Item 2",
                                amount: 50,
                                quantity: 1,
                            },
                        ],
                    },
                ],
            },
        });
        expect(response).toEqual({
            data: [
                {
                    id: "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    foreignId: "YOUR-INVOICE-ID",
                },
                {
                    error: "Invoice update failed",
                    foreignId: "YOUR-SECOND-INVOICE-ID",
                },
            ],
        });
    });

    test("approve", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });
        const rawRequestBody = {
            invoices: [
                {
                    invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                    text: "This is a reason for my action",
                    userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                },
            ],
        };
        const rawResponseBody = {
            data: [
                { id: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9" },
                { id: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9", error: "Invoice approval failed" },
            ],
        };
        server
            .mockEndpoint()
            .post("/invoices/approve")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.bulk.approve({
            body: {
                invoices: [
                    {
                        invoiceId: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                        text: "This is a reason for my action",
                        userId: "user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                    },
                ],
            },
        });
        expect(response).toEqual({
            data: [
                {
                    id: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                },
                {
                    id: "in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                    error: "Invoice approval failed",
                },
            ],
        });
    });

    test("download", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = { url: "https://mercoa.com/download/bulk-invoices.csv", mimeType: "text/csv" };
        server.mockEndpoint().get("/invoices/download").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.invoice.bulk.download({
            format: "CSV",
        });
        expect(response).toEqual({
            url: "https://mercoa.com/download/bulk-invoices.csv",
            mimeType: "text/csv",
        });
    });
});
