/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { MercoaClient } from "../../../src/Client";

describe("PaymentLinks", () => {
    test("getPayerLink", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = "https://mercoa.com/pay/make-payment/?token=123456";
        server
            .mockEndpoint()
            .get("/invoice/in_a0f6ea94-0761-4a5e-a416-3c453cb7eced/payerLink")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.paymentLinks.getPayerLink("in_a0f6ea94-0761-4a5e-a416-3c453cb7eced");
        expect(response).toEqual("https://mercoa.com/pay/make-payment/?token=123456");
    });

    test("sendPayerEmail", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .post("/invoice/in_a0f6ea94-0761-4a5e-a416-3c453cb7eced/sendPayerEmail")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.invoice.paymentLinks.sendPayerEmail("in_a0f6ea94-0761-4a5e-a416-3c453cb7eced", {
            attachInvoice: true,
        });
        expect(response).toEqual(undefined);
    });

    test("getVendorLink", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        const rawResponseBody = "https://mercoa.com/vendors/accept-payment/?token=123456";
        server
            .mockEndpoint()
            .get("/invoice/in_a0f6ea94-0761-4a5e-a416-3c453cb7eced/vendorLink")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.invoice.paymentLinks.getVendorLink("in_a0f6ea94-0761-4a5e-a416-3c453cb7eced");
        expect(response).toEqual("https://mercoa.com/vendors/accept-payment/?token=123456");
    });

    test("sendVendorEmail", async () => {
        const server = mockServerPool.createServer();
        const client = new MercoaClient({ token: "test", xApiVersion: "2024-08-01", environment: server.baseUrl });

        server
            .mockEndpoint()
            .post("/invoice/in_a0f6ea94-0761-4a5e-a416-3c453cb7eced/sendVendorEmail")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.invoice.paymentLinks.sendVendorEmail("in_a0f6ea94-0761-4a5e-a416-3c453cb7eced");
        expect(response).toEqual(undefined);
    });
});
